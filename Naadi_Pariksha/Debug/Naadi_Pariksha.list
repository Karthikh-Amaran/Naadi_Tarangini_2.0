
Naadi_Pariksha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08001678  08001678  00011678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001714  08001714  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001714  08001714  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001714  08001714  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001714  08001714  00011714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001718  08001718  00011718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800171c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000064  08001780  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08001780  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bc1  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007c7  00000000  00000000  00021c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00022420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  000225e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fb74  00000000  00000000  00022738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000241b  00000000  00000000  000322ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005580c  00000000  00000000  000346c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00089ed3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d38  00000000  00000000  00089f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001660 	.word	0x08001660

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001660 	.word	0x08001660

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
{
	volatile int i=0;
	for(i=0;i<16000000;i++);
}
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	int count =0;
 8000286:	2300      	movs	r3, #0
 8000288:	607b      	str	r3, [r7, #4]
	uart2_rxtx_init(); // PA2 TX : PA3 RX
 800028a:	f000 f97f 	bl	800058c <uart2_rxtx_init>
	pa1_adc_init();
 800028e:	f000 f829 	bl	80002e4 <pa1_adc_init>
	start_continuous_conversion();
 8000292:	f000 f857 	bl	8000344 <start_continuous_conversion>
	//printf("TimeStamp,Value");
	while(1)
	{
		count++;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	3301      	adds	r3, #1
 800029a:	607b      	str	r3, [r7, #4]
		sensor_value = adc_read(); // ADC IN PA1
 800029c:	f000 f868 	bl	8000370 <adc_read>
 80002a0:	4603      	mov	r3, r0
 80002a2:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <main+0x58>)
 80002a4:	6013      	str	r3, [r2, #0]
		printf("%d,",(int)(sensor_value)); fflush(stdout);
 80002a6:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <main+0x58>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4619      	mov	r1, r3
 80002ac:	480b      	ldr	r0, [pc, #44]	; (80002dc <main+0x5c>)
 80002ae:	f000 fce3 	bl	8000c78 <iprintf>
 80002b2:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <main+0x60>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fac5 	bl	8000848 <fflush>
		//delay();
		//SysTickMsDelay(2);
		SysTickMsDelay(200);
 80002be:	20c8      	movs	r0, #200	; 0xc8
 80002c0:	f000 f934 	bl	800052c <SysTickMsDelay>
		if(count == 107)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b6b      	cmp	r3, #107	; 0x6b
 80002c8:	d000      	beq.n	80002cc <main+0x4c>
		count++;
 80002ca:	e7e4      	b.n	8000296 <main+0x16>
		{
			//printf("%d",(int)(sensor_value)); fflush(stdout);
			break;
 80002cc:	bf00      	nop
 80002ce:	2300      	movs	r3, #0
		}
	}
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000080 	.word	0x20000080
 80002dc:	08001678 	.word	0x08001678
 80002e0:	20000000 	.word	0x20000000

080002e4 <pa1_adc_init>:
 *   SQ3 - set with value 13 (0x1101)
 *   And L - set as three (3-1 value in binary)
 */

void pa1_adc_init(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	/* 1. Configure the ADC GPIO Pin */
	/* Enable Clock Access to GPIOA */
	RCC->AHB1ENR |= GPIOAEN;
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <pa1_adc_init+0x54>)
 80002ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ec:	4a12      	ldr	r2, [pc, #72]	; (8000338 <pa1_adc_init+0x54>)
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	6313      	str	r3, [r2, #48]	; 0x30
	/* Set the mode of the PA1 to analog */
	GPIOA->MODER |= 0x3<<2;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <pa1_adc_init+0x58>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a10      	ldr	r2, [pc, #64]	; (800033c <pa1_adc_init+0x58>)
 80002fa:	f043 030c 	orr.w	r3, r3, #12
 80002fe:	6013      	str	r3, [r2, #0]
	/* 2. Configure the ADC Module */
	/* Enable clock access to ADC */
	RCC->APB2ENR |= ADC1EN;
 8000300:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <pa1_adc_init+0x54>)
 8000302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000304:	4a0c      	ldr	r2, [pc, #48]	; (8000338 <pa1_adc_init+0x54>)
 8000306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800030a:	6453      	str	r3, [r2, #68]	; 0x44
	/* Conversion sequence Configuration */
	ADC1->SQR3 |= ADC1_CH1; // Using CH1 (ADC1_CH1) - PA1
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <pa1_adc_init+0x5c>)
 800030e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000310:	4a0b      	ldr	r2, [pc, #44]	; (8000340 <pa1_adc_init+0x5c>)
 8000312:	f043 0301 	orr.w	r3, r3, #1
 8000316:	6353      	str	r3, [r2, #52]	; 0x34
	/* Conversion Sequence length */
	ADC1->SQR1 |= ADC1_SEQ_LEN;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <pa1_adc_init+0x5c>)
 800031a:	4a09      	ldr	r2, [pc, #36]	; (8000340 <pa1_adc_init+0x5c>)
 800031c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800031e:	62d3      	str	r3, [r2, #44]	; 0x2c
	/* Enable ADC Module */
	ADC1->CR2 |= CR2_ADON;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <pa1_adc_init+0x5c>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	4a06      	ldr	r2, [pc, #24]	; (8000340 <pa1_adc_init+0x5c>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	6093      	str	r3, [r2, #8]
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40023800 	.word	0x40023800
 800033c:	40020000 	.word	0x40020000
 8000340:	40012000 	.word	0x40012000

08000344 <start_continuous_conversion>:
{
	/* Start ADC Conversion */
	ADC1->CR2 |= CR2_SWSTART;
}
void start_continuous_conversion(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
	/* Start ADC Conversion */
	ADC1->CR2 |= CR2_CONT;
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <start_continuous_conversion+0x28>)
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	4a07      	ldr	r2, [pc, #28]	; (800036c <start_continuous_conversion+0x28>)
 800034e:	f043 0302 	orr.w	r3, r3, #2
 8000352:	6093      	str	r3, [r2, #8]
	/* Start ADC Conversion */
	ADC1->CR2 |= CR2_SWSTART;
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <start_continuous_conversion+0x28>)
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <start_continuous_conversion+0x28>)
 800035a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800035e:	6093      	str	r3, [r2, #8]
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40012000 	.word	0x40012000

08000370 <adc_read>:

uint32_t adc_read(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	/* Wait for Conversion to be complete */
	/* Check for the EOC Flag in ADC Status register */
	while(!((ADC1->SR)&(0x1<<1))); // Wait here until conversion completed
 8000374:	bf00      	nop
 8000376:	4b06      	ldr	r3, [pc, #24]	; (8000390 <adc_read+0x20>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f003 0302 	and.w	r3, r3, #2
 800037e:	2b00      	cmp	r3, #0
 8000380:	d0f9      	beq.n	8000376 <adc_read+0x6>
	/* Now return the ADC value */
	return (ADC1->DR);
 8000382:	4b03      	ldr	r3, [pc, #12]	; (8000390 <adc_read+0x20>)
 8000384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

}
 8000386:	4618      	mov	r0, r3
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40012000 	.word	0x40012000

08000394 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <ITM_SendChar+0x48>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a0e      	ldr	r2, [pc, #56]	; (80003dc <ITM_SendChar+0x48>)
 80003a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003a8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80003aa:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <ITM_SendChar+0x4c>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a0c      	ldr	r2, [pc, #48]	; (80003e0 <ITM_SendChar+0x4c>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80003b6:	bf00      	nop
 80003b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d0f8      	beq.n	80003b8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80003c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	6013      	str	r3, [r2, #0]
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	e000edfc 	.word	0xe000edfc
 80003e0:	e0000e00 	.word	0xe0000e00

080003e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
 80003f4:	e00a      	b.n	800040c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003f6:	f3af 8000 	nop.w
 80003fa:	4601      	mov	r1, r0
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	1c5a      	adds	r2, r3, #1
 8000400:	60ba      	str	r2, [r7, #8]
 8000402:	b2ca      	uxtb	r2, r1
 8000404:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	3301      	adds	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
 800040c:	697a      	ldr	r2, [r7, #20]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	429a      	cmp	r2, r3
 8000412:	dbf0      	blt.n	80003f6 <_read+0x12>
	}

return len;
 8000414:	687b      	ldr	r3, [r7, #4]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b086      	sub	sp, #24
 8000422:	af00      	add	r7, sp, #0
 8000424:	60f8      	str	r0, [r7, #12]
 8000426:	60b9      	str	r1, [r7, #8]
 8000428:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
 800042e:	e009      	b.n	8000444 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	1c5a      	adds	r2, r3, #1
 8000434:	60ba      	str	r2, [r7, #8]
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ffab 	bl	8000394 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043e:	697b      	ldr	r3, [r7, #20]
 8000440:	3301      	adds	r3, #1
 8000442:	617b      	str	r3, [r7, #20]
 8000444:	697a      	ldr	r2, [r7, #20]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	429a      	cmp	r2, r3
 800044a:	dbf1      	blt.n	8000430 <_write+0x12>
		//__io_putchar(*ptr++);
	}
	return len;
 800044c:	687b      	ldr	r3, [r7, #4]
}
 800044e:	4618      	mov	r0, r3
 8000450:	3718      	adds	r7, #24
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <_close>:

int _close(int file)
{
 8000456:	b480      	push	{r7}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
	return -1;
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000462:	4618      	mov	r0, r3
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800046e:	b480      	push	{r7}
 8000470:	b083      	sub	sp, #12
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
 8000476:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800047e:	605a      	str	r2, [r3, #4]
	return 0;
 8000480:	2300      	movs	r3, #0
}
 8000482:	4618      	mov	r0, r3
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <_isatty>:

int _isatty(int file)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
	return 1;
 8000496:	2301      	movs	r3, #1
}
 8000498:	4618      	mov	r0, r3
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
	return 0;
 80004b0:	2300      	movs	r3, #0
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
	...

080004c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c8:	4a14      	ldr	r2, [pc, #80]	; (800051c <_sbrk+0x5c>)
 80004ca:	4b15      	ldr	r3, [pc, #84]	; (8000520 <_sbrk+0x60>)
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <_sbrk+0x64>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d102      	bne.n	80004e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <_sbrk+0x64>)
 80004de:	4a12      	ldr	r2, [pc, #72]	; (8000528 <_sbrk+0x68>)
 80004e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <_sbrk+0x64>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4413      	add	r3, r2
 80004ea:	693a      	ldr	r2, [r7, #16]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d207      	bcs.n	8000500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004f0:	f000 f8e2 	bl	80006b8 <__errno>
 80004f4:	4603      	mov	r3, r0
 80004f6:	220c      	movs	r2, #12
 80004f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004fa:	f04f 33ff 	mov.w	r3, #4294967295
 80004fe:	e009      	b.n	8000514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <_sbrk+0x64>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000506:	4b07      	ldr	r3, [pc, #28]	; (8000524 <_sbrk+0x64>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	4a05      	ldr	r2, [pc, #20]	; (8000524 <_sbrk+0x64>)
 8000510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000512:	68fb      	ldr	r3, [r7, #12]
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20020000 	.word	0x20020000
 8000520:	00000400 	.word	0x00000400
 8000524:	20000084 	.word	0x20000084
 8000528:	20000098 	.word	0x20000098

0800052c <SysTickMsDelay>:
 *  Created on: 30-Jan-2023
 *      Author: Karthikh Amaran
 */
#include "stm32f4xx.h"
void SysTickMsDelay(uint32_t delay)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	/* Load the Reload Value register */
	/* The value should be creating 1ms delay */
	/* The So for internal clock 16MHz to create 1ms delay */
	/* We need to Load with the value 16000 (Delay = N/Sysclk) */
	SysTick->LOAD = 1900;
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <SysTickMsDelay+0x5c>)
 8000536:	f240 726c 	movw	r2, #1900	; 0x76c
 800053a:	605a      	str	r2, [r3, #4]

	/* Set the clock source and enable the timer */
	SysTick->CTRL = (1U<<2);
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <SysTickMsDelay+0x5c>)
 800053e:	2204      	movs	r2, #4
 8000540:	601a      	str	r2, [r3, #0]
	SysTick->CTRL = (1U<<0);
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <SysTickMsDelay+0x5c>)
 8000544:	2201      	movs	r2, #1
 8000546:	601a      	str	r2, [r3, #0]
	/* Clear the Current Value register */
	SysTick->VAL = 0;
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <SysTickMsDelay+0x5c>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]

	/* Wait until Count Flag is Set */
	/* Count Flag sets if the counting is over */
	/* After it is read it will again set to zero */
	/* And the timers don't care about anything it will be always reloading and counting until they get disabled */
	for(uint32_t i=0;i<delay;i++)
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	e009      	b.n	8000568 <SysTickMsDelay+0x3c>
	{
		while(!(SysTick->CTRL & 0x1<<16));
 8000554:	bf00      	nop
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <SysTickMsDelay+0x5c>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0f9      	beq.n	8000556 <SysTickMsDelay+0x2a>
	for(uint32_t i=0;i<delay;i++)
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	3301      	adds	r3, #1
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fa      	ldr	r2, [r7, #12]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	d3f1      	bcc.n	8000554 <SysTickMsDelay+0x28>
	}

	/* Disable the Timer */
	SysTick->CTRL &= ~(1U<<0);
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <SysTickMsDelay+0x5c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <SysTickMsDelay+0x5c>)
 8000576:	f023 0301 	bic.w	r3, r3, #1
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	e000e010 	.word	0xe000e010

0800058c <uart2_rxtx_init>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);


// Function for UART initialization
void uart2_rxtx_init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	/*********** CONFIGURE GPIO UART PINS ***********/
/* First Configuring the GPIOS for UART2*/
/* GPIOA PIN2 in AF07 - TX */
/* GPIOA PIN3 in AF07 - RX */
	// 1. Enabling the clock for GPIOA and USART2 Peripherals
	RCC->AHB1ENR |= GPIOAEN;
 8000590:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <uart2_rxtx_init+0x7c>)
 8000592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000594:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <uart2_rxtx_init+0x7c>)
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	6313      	str	r3, [r2, #48]	; 0x30
	// 2. Set the Mode as Alternate function for PA2 and PA3
	GPIOA->MODER &= ~(0xf<<4);
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <uart2_rxtx_init+0x80>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1a      	ldr	r2, [pc, #104]	; (800060c <uart2_rxtx_init+0x80>)
 80005a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (10<<4);// 0x1010 0000
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <uart2_rxtx_init+0x80>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a17      	ldr	r2, [pc, #92]	; (800060c <uart2_rxtx_init+0x80>)
 80005ae:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80005b2:	6013      	str	r3, [r2, #0]
	// 3. Set Alter function register for those pins for PA2 and PA3
	GPIOA->AFR[0] &= ~(0xff<<8);
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <uart2_rxtx_init+0x80>)
 80005b6:	6a1b      	ldr	r3, [r3, #32]
 80005b8:	4a14      	ldr	r2, [pc, #80]	; (800060c <uart2_rxtx_init+0x80>)
 80005ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80005be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x77<<8); // 0x0111 0111 0000 0000
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <uart2_rxtx_init+0x80>)
 80005c2:	6a1b      	ldr	r3, [r3, #32]
 80005c4:	4a11      	ldr	r2, [pc, #68]	; (800060c <uart2_rxtx_init+0x80>)
 80005c6:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80005ca:	6213      	str	r3, [r2, #32]
	}*/


/*********** CONFIGURE the UART peripheral ***********/
	// 1. Enable the clock access to uart2
	RCC->APB1ENR |= USART2EN;
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <uart2_rxtx_init+0x7c>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <uart2_rxtx_init+0x7c>)
 80005d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40


	// 2. Configure Baud-rate
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80005d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005dc:	490c      	ldr	r1, [pc, #48]	; (8000610 <uart2_rxtx_init+0x84>)
 80005de:	480d      	ldr	r0, [pc, #52]	; (8000614 <uart2_rxtx_init+0x88>)
 80005e0:	f000 f81a 	bl	8000618 <uart_set_baudrate>
	// 3. Configure the transfer direction
	USART2->CR1 = CR1_TE; // Clear all the bits and only set TE bit; TE - Transmitter Enable
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <uart2_rxtx_init+0x88>)
 80005e6:	2208      	movs	r2, #8
 80005e8:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= CR1_RE; // Setting only RE Bit
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <uart2_rxtx_init+0x88>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	4a09      	ldr	r2, [pc, #36]	; (8000614 <uart2_rxtx_init+0x88>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	60d3      	str	r3, [r2, #12]
	// 4. Enable the UART Module
	USART2->CR1 |= CR1_UE; // UART Enable
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <uart2_rxtx_init+0x88>)
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	4a06      	ldr	r2, [pc, #24]	; (8000614 <uart2_rxtx_init+0x88>)
 80005fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000600:	60d3      	str	r3, [r2, #12]
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40020000 	.word	0x40020000
 8000610:	00f42400 	.word	0x00f42400
 8000614:	40004400 	.word	0x40004400

08000618 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk,uint32_t BaudRate)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	68b8      	ldr	r0, [r7, #8]
 8000628:	f000 f808 	bl	800063c <compute_uart_bd>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	609a      	str	r2, [r3, #8]
}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
	return ((PeriphClk+(BaudRate/2U))/BaudRate);
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	085a      	lsrs	r2, r3, #1
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	fbb2 f3f3 	udiv	r3, r2, r3
 8000654:	b29b      	uxth	r3, r3
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
	...

08000664 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000666:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000668:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800066e:	490d      	ldr	r1, [pc, #52]	; (80006a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000670:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <LoopForever+0xe>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000684:	4c0a      	ldr	r4, [pc, #40]	; (80006b0 <LoopForever+0x16>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000692:	f000 f9e1 	bl	8000a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000696:	f7ff fdf3 	bl	8000280 <main>

0800069a <LoopForever>:

LoopForever:
    b LoopForever
 800069a:	e7fe      	b.n	800069a <LoopForever>
  ldr   r0, =_estack
 800069c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006a8:	0800171c 	.word	0x0800171c
  ldr r2, =_sbss
 80006ac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006b0:	20000098 	.word	0x20000098

080006b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC_IRQHandler>
	...

080006b8 <__errno>:
 80006b8:	4b01      	ldr	r3, [pc, #4]	; (80006c0 <__errno+0x8>)
 80006ba:	6818      	ldr	r0, [r3, #0]
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000000 	.word	0x20000000

080006c4 <__sflush_r>:
 80006c4:	898a      	ldrh	r2, [r1, #12]
 80006c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006ca:	4605      	mov	r5, r0
 80006cc:	0710      	lsls	r0, r2, #28
 80006ce:	460c      	mov	r4, r1
 80006d0:	d458      	bmi.n	8000784 <__sflush_r+0xc0>
 80006d2:	684b      	ldr	r3, [r1, #4]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	dc05      	bgt.n	80006e4 <__sflush_r+0x20>
 80006d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80006da:	2b00      	cmp	r3, #0
 80006dc:	dc02      	bgt.n	80006e4 <__sflush_r+0x20>
 80006de:	2000      	movs	r0, #0
 80006e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80006e6:	2e00      	cmp	r6, #0
 80006e8:	d0f9      	beq.n	80006de <__sflush_r+0x1a>
 80006ea:	2300      	movs	r3, #0
 80006ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80006f0:	682f      	ldr	r7, [r5, #0]
 80006f2:	602b      	str	r3, [r5, #0]
 80006f4:	d032      	beq.n	800075c <__sflush_r+0x98>
 80006f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80006f8:	89a3      	ldrh	r3, [r4, #12]
 80006fa:	075a      	lsls	r2, r3, #29
 80006fc:	d505      	bpl.n	800070a <__sflush_r+0x46>
 80006fe:	6863      	ldr	r3, [r4, #4]
 8000700:	1ac0      	subs	r0, r0, r3
 8000702:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000704:	b10b      	cbz	r3, 800070a <__sflush_r+0x46>
 8000706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000708:	1ac0      	subs	r0, r0, r3
 800070a:	2300      	movs	r3, #0
 800070c:	4602      	mov	r2, r0
 800070e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000710:	6a21      	ldr	r1, [r4, #32]
 8000712:	4628      	mov	r0, r5
 8000714:	47b0      	blx	r6
 8000716:	1c43      	adds	r3, r0, #1
 8000718:	89a3      	ldrh	r3, [r4, #12]
 800071a:	d106      	bne.n	800072a <__sflush_r+0x66>
 800071c:	6829      	ldr	r1, [r5, #0]
 800071e:	291d      	cmp	r1, #29
 8000720:	d82c      	bhi.n	800077c <__sflush_r+0xb8>
 8000722:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <__sflush_r+0x108>)
 8000724:	40ca      	lsrs	r2, r1
 8000726:	07d6      	lsls	r6, r2, #31
 8000728:	d528      	bpl.n	800077c <__sflush_r+0xb8>
 800072a:	2200      	movs	r2, #0
 800072c:	6062      	str	r2, [r4, #4]
 800072e:	04d9      	lsls	r1, r3, #19
 8000730:	6922      	ldr	r2, [r4, #16]
 8000732:	6022      	str	r2, [r4, #0]
 8000734:	d504      	bpl.n	8000740 <__sflush_r+0x7c>
 8000736:	1c42      	adds	r2, r0, #1
 8000738:	d101      	bne.n	800073e <__sflush_r+0x7a>
 800073a:	682b      	ldr	r3, [r5, #0]
 800073c:	b903      	cbnz	r3, 8000740 <__sflush_r+0x7c>
 800073e:	6560      	str	r0, [r4, #84]	; 0x54
 8000740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000742:	602f      	str	r7, [r5, #0]
 8000744:	2900      	cmp	r1, #0
 8000746:	d0ca      	beq.n	80006de <__sflush_r+0x1a>
 8000748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800074c:	4299      	cmp	r1, r3
 800074e:	d002      	beq.n	8000756 <__sflush_r+0x92>
 8000750:	4628      	mov	r0, r5
 8000752:	f000 f9b1 	bl	8000ab8 <_free_r>
 8000756:	2000      	movs	r0, #0
 8000758:	6360      	str	r0, [r4, #52]	; 0x34
 800075a:	e7c1      	b.n	80006e0 <__sflush_r+0x1c>
 800075c:	6a21      	ldr	r1, [r4, #32]
 800075e:	2301      	movs	r3, #1
 8000760:	4628      	mov	r0, r5
 8000762:	47b0      	blx	r6
 8000764:	1c41      	adds	r1, r0, #1
 8000766:	d1c7      	bne.n	80006f8 <__sflush_r+0x34>
 8000768:	682b      	ldr	r3, [r5, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d0c4      	beq.n	80006f8 <__sflush_r+0x34>
 800076e:	2b1d      	cmp	r3, #29
 8000770:	d001      	beq.n	8000776 <__sflush_r+0xb2>
 8000772:	2b16      	cmp	r3, #22
 8000774:	d101      	bne.n	800077a <__sflush_r+0xb6>
 8000776:	602f      	str	r7, [r5, #0]
 8000778:	e7b1      	b.n	80006de <__sflush_r+0x1a>
 800077a:	89a3      	ldrh	r3, [r4, #12]
 800077c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000780:	81a3      	strh	r3, [r4, #12]
 8000782:	e7ad      	b.n	80006e0 <__sflush_r+0x1c>
 8000784:	690f      	ldr	r7, [r1, #16]
 8000786:	2f00      	cmp	r7, #0
 8000788:	d0a9      	beq.n	80006de <__sflush_r+0x1a>
 800078a:	0793      	lsls	r3, r2, #30
 800078c:	680e      	ldr	r6, [r1, #0]
 800078e:	bf08      	it	eq
 8000790:	694b      	ldreq	r3, [r1, #20]
 8000792:	600f      	str	r7, [r1, #0]
 8000794:	bf18      	it	ne
 8000796:	2300      	movne	r3, #0
 8000798:	eba6 0807 	sub.w	r8, r6, r7
 800079c:	608b      	str	r3, [r1, #8]
 800079e:	f1b8 0f00 	cmp.w	r8, #0
 80007a2:	dd9c      	ble.n	80006de <__sflush_r+0x1a>
 80007a4:	6a21      	ldr	r1, [r4, #32]
 80007a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80007a8:	4643      	mov	r3, r8
 80007aa:	463a      	mov	r2, r7
 80007ac:	4628      	mov	r0, r5
 80007ae:	47b0      	blx	r6
 80007b0:	2800      	cmp	r0, #0
 80007b2:	dc06      	bgt.n	80007c2 <__sflush_r+0xfe>
 80007b4:	89a3      	ldrh	r3, [r4, #12]
 80007b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ba:	81a3      	strh	r3, [r4, #12]
 80007bc:	f04f 30ff 	mov.w	r0, #4294967295
 80007c0:	e78e      	b.n	80006e0 <__sflush_r+0x1c>
 80007c2:	4407      	add	r7, r0
 80007c4:	eba8 0800 	sub.w	r8, r8, r0
 80007c8:	e7e9      	b.n	800079e <__sflush_r+0xda>
 80007ca:	bf00      	nop
 80007cc:	20400001 	.word	0x20400001

080007d0 <_fflush_r>:
 80007d0:	b538      	push	{r3, r4, r5, lr}
 80007d2:	690b      	ldr	r3, [r1, #16]
 80007d4:	4605      	mov	r5, r0
 80007d6:	460c      	mov	r4, r1
 80007d8:	b913      	cbnz	r3, 80007e0 <_fflush_r+0x10>
 80007da:	2500      	movs	r5, #0
 80007dc:	4628      	mov	r0, r5
 80007de:	bd38      	pop	{r3, r4, r5, pc}
 80007e0:	b118      	cbz	r0, 80007ea <_fflush_r+0x1a>
 80007e2:	6983      	ldr	r3, [r0, #24]
 80007e4:	b90b      	cbnz	r3, 80007ea <_fflush_r+0x1a>
 80007e6:	f000 f899 	bl	800091c <__sinit>
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <_fflush_r+0x6c>)
 80007ec:	429c      	cmp	r4, r3
 80007ee:	d11b      	bne.n	8000828 <_fflush_r+0x58>
 80007f0:	686c      	ldr	r4, [r5, #4]
 80007f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0ef      	beq.n	80007da <_fflush_r+0xa>
 80007fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80007fc:	07d0      	lsls	r0, r2, #31
 80007fe:	d404      	bmi.n	800080a <_fflush_r+0x3a>
 8000800:	0599      	lsls	r1, r3, #22
 8000802:	d402      	bmi.n	800080a <_fflush_r+0x3a>
 8000804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000806:	f000 f94c 	bl	8000aa2 <__retarget_lock_acquire_recursive>
 800080a:	4628      	mov	r0, r5
 800080c:	4621      	mov	r1, r4
 800080e:	f7ff ff59 	bl	80006c4 <__sflush_r>
 8000812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000814:	07da      	lsls	r2, r3, #31
 8000816:	4605      	mov	r5, r0
 8000818:	d4e0      	bmi.n	80007dc <_fflush_r+0xc>
 800081a:	89a3      	ldrh	r3, [r4, #12]
 800081c:	059b      	lsls	r3, r3, #22
 800081e:	d4dd      	bmi.n	80007dc <_fflush_r+0xc>
 8000820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000822:	f000 f93f 	bl	8000aa4 <__retarget_lock_release_recursive>
 8000826:	e7d9      	b.n	80007dc <_fflush_r+0xc>
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <_fflush_r+0x70>)
 800082a:	429c      	cmp	r4, r3
 800082c:	d101      	bne.n	8000832 <_fflush_r+0x62>
 800082e:	68ac      	ldr	r4, [r5, #8]
 8000830:	e7df      	b.n	80007f2 <_fflush_r+0x22>
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <_fflush_r+0x74>)
 8000834:	429c      	cmp	r4, r3
 8000836:	bf08      	it	eq
 8000838:	68ec      	ldreq	r4, [r5, #12]
 800083a:	e7da      	b.n	80007f2 <_fflush_r+0x22>
 800083c:	0800169c 	.word	0x0800169c
 8000840:	080016bc 	.word	0x080016bc
 8000844:	0800167c 	.word	0x0800167c

08000848 <fflush>:
 8000848:	4601      	mov	r1, r0
 800084a:	b920      	cbnz	r0, 8000856 <fflush+0xe>
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <fflush+0x18>)
 800084e:	4905      	ldr	r1, [pc, #20]	; (8000864 <fflush+0x1c>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	f000 b8e1 	b.w	8000a18 <_fwalk_reent>
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <fflush+0x20>)
 8000858:	6818      	ldr	r0, [r3, #0]
 800085a:	f7ff bfb9 	b.w	80007d0 <_fflush_r>
 800085e:	bf00      	nop
 8000860:	080016dc 	.word	0x080016dc
 8000864:	080007d1 	.word	0x080007d1
 8000868:	20000000 	.word	0x20000000

0800086c <std>:
 800086c:	2300      	movs	r3, #0
 800086e:	b510      	push	{r4, lr}
 8000870:	4604      	mov	r4, r0
 8000872:	e9c0 3300 	strd	r3, r3, [r0]
 8000876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800087a:	6083      	str	r3, [r0, #8]
 800087c:	8181      	strh	r1, [r0, #12]
 800087e:	6643      	str	r3, [r0, #100]	; 0x64
 8000880:	81c2      	strh	r2, [r0, #14]
 8000882:	6183      	str	r3, [r0, #24]
 8000884:	4619      	mov	r1, r3
 8000886:	2208      	movs	r2, #8
 8000888:	305c      	adds	r0, #92	; 0x5c
 800088a:	f000 f90c 	bl	8000aa6 <memset>
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <std+0x38>)
 8000890:	6263      	str	r3, [r4, #36]	; 0x24
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <std+0x3c>)
 8000894:	62a3      	str	r3, [r4, #40]	; 0x28
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <std+0x40>)
 8000898:	62e3      	str	r3, [r4, #44]	; 0x2c
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <std+0x44>)
 800089c:	6224      	str	r4, [r4, #32]
 800089e:	6323      	str	r3, [r4, #48]	; 0x30
 80008a0:	bd10      	pop	{r4, pc}
 80008a2:	bf00      	nop
 80008a4:	08000cc9 	.word	0x08000cc9
 80008a8:	08000ceb 	.word	0x08000ceb
 80008ac:	08000d23 	.word	0x08000d23
 80008b0:	08000d47 	.word	0x08000d47

080008b4 <_cleanup_r>:
 80008b4:	4901      	ldr	r1, [pc, #4]	; (80008bc <_cleanup_r+0x8>)
 80008b6:	f000 b8af 	b.w	8000a18 <_fwalk_reent>
 80008ba:	bf00      	nop
 80008bc:	080007d1 	.word	0x080007d1

080008c0 <__sfmoreglue>:
 80008c0:	b570      	push	{r4, r5, r6, lr}
 80008c2:	2268      	movs	r2, #104	; 0x68
 80008c4:	1e4d      	subs	r5, r1, #1
 80008c6:	4355      	muls	r5, r2
 80008c8:	460e      	mov	r6, r1
 80008ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80008ce:	f000 f95f 	bl	8000b90 <_malloc_r>
 80008d2:	4604      	mov	r4, r0
 80008d4:	b140      	cbz	r0, 80008e8 <__sfmoreglue+0x28>
 80008d6:	2100      	movs	r1, #0
 80008d8:	e9c0 1600 	strd	r1, r6, [r0]
 80008dc:	300c      	adds	r0, #12
 80008de:	60a0      	str	r0, [r4, #8]
 80008e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80008e4:	f000 f8df 	bl	8000aa6 <memset>
 80008e8:	4620      	mov	r0, r4
 80008ea:	bd70      	pop	{r4, r5, r6, pc}

080008ec <__sfp_lock_acquire>:
 80008ec:	4801      	ldr	r0, [pc, #4]	; (80008f4 <__sfp_lock_acquire+0x8>)
 80008ee:	f000 b8d8 	b.w	8000aa2 <__retarget_lock_acquire_recursive>
 80008f2:	bf00      	nop
 80008f4:	20000089 	.word	0x20000089

080008f8 <__sfp_lock_release>:
 80008f8:	4801      	ldr	r0, [pc, #4]	; (8000900 <__sfp_lock_release+0x8>)
 80008fa:	f000 b8d3 	b.w	8000aa4 <__retarget_lock_release_recursive>
 80008fe:	bf00      	nop
 8000900:	20000089 	.word	0x20000089

08000904 <__sinit_lock_acquire>:
 8000904:	4801      	ldr	r0, [pc, #4]	; (800090c <__sinit_lock_acquire+0x8>)
 8000906:	f000 b8cc 	b.w	8000aa2 <__retarget_lock_acquire_recursive>
 800090a:	bf00      	nop
 800090c:	2000008a 	.word	0x2000008a

08000910 <__sinit_lock_release>:
 8000910:	4801      	ldr	r0, [pc, #4]	; (8000918 <__sinit_lock_release+0x8>)
 8000912:	f000 b8c7 	b.w	8000aa4 <__retarget_lock_release_recursive>
 8000916:	bf00      	nop
 8000918:	2000008a 	.word	0x2000008a

0800091c <__sinit>:
 800091c:	b510      	push	{r4, lr}
 800091e:	4604      	mov	r4, r0
 8000920:	f7ff fff0 	bl	8000904 <__sinit_lock_acquire>
 8000924:	69a3      	ldr	r3, [r4, #24]
 8000926:	b11b      	cbz	r3, 8000930 <__sinit+0x14>
 8000928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800092c:	f7ff bff0 	b.w	8000910 <__sinit_lock_release>
 8000930:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000934:	6523      	str	r3, [r4, #80]	; 0x50
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <__sinit+0x68>)
 8000938:	4a13      	ldr	r2, [pc, #76]	; (8000988 <__sinit+0x6c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	62a2      	str	r2, [r4, #40]	; 0x28
 800093e:	42a3      	cmp	r3, r4
 8000940:	bf04      	itt	eq
 8000942:	2301      	moveq	r3, #1
 8000944:	61a3      	streq	r3, [r4, #24]
 8000946:	4620      	mov	r0, r4
 8000948:	f000 f820 	bl	800098c <__sfp>
 800094c:	6060      	str	r0, [r4, #4]
 800094e:	4620      	mov	r0, r4
 8000950:	f000 f81c 	bl	800098c <__sfp>
 8000954:	60a0      	str	r0, [r4, #8]
 8000956:	4620      	mov	r0, r4
 8000958:	f000 f818 	bl	800098c <__sfp>
 800095c:	2200      	movs	r2, #0
 800095e:	60e0      	str	r0, [r4, #12]
 8000960:	2104      	movs	r1, #4
 8000962:	6860      	ldr	r0, [r4, #4]
 8000964:	f7ff ff82 	bl	800086c <std>
 8000968:	68a0      	ldr	r0, [r4, #8]
 800096a:	2201      	movs	r2, #1
 800096c:	2109      	movs	r1, #9
 800096e:	f7ff ff7d 	bl	800086c <std>
 8000972:	68e0      	ldr	r0, [r4, #12]
 8000974:	2202      	movs	r2, #2
 8000976:	2112      	movs	r1, #18
 8000978:	f7ff ff78 	bl	800086c <std>
 800097c:	2301      	movs	r3, #1
 800097e:	61a3      	str	r3, [r4, #24]
 8000980:	e7d2      	b.n	8000928 <__sinit+0xc>
 8000982:	bf00      	nop
 8000984:	080016dc 	.word	0x080016dc
 8000988:	080008b5 	.word	0x080008b5

0800098c <__sfp>:
 800098c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800098e:	4607      	mov	r7, r0
 8000990:	f7ff ffac 	bl	80008ec <__sfp_lock_acquire>
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <__sfp+0x84>)
 8000996:	681e      	ldr	r6, [r3, #0]
 8000998:	69b3      	ldr	r3, [r6, #24]
 800099a:	b913      	cbnz	r3, 80009a2 <__sfp+0x16>
 800099c:	4630      	mov	r0, r6
 800099e:	f7ff ffbd 	bl	800091c <__sinit>
 80009a2:	3648      	adds	r6, #72	; 0x48
 80009a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80009a8:	3b01      	subs	r3, #1
 80009aa:	d503      	bpl.n	80009b4 <__sfp+0x28>
 80009ac:	6833      	ldr	r3, [r6, #0]
 80009ae:	b30b      	cbz	r3, 80009f4 <__sfp+0x68>
 80009b0:	6836      	ldr	r6, [r6, #0]
 80009b2:	e7f7      	b.n	80009a4 <__sfp+0x18>
 80009b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80009b8:	b9d5      	cbnz	r5, 80009f0 <__sfp+0x64>
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <__sfp+0x88>)
 80009bc:	60e3      	str	r3, [r4, #12]
 80009be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80009c2:	6665      	str	r5, [r4, #100]	; 0x64
 80009c4:	f000 f86c 	bl	8000aa0 <__retarget_lock_init_recursive>
 80009c8:	f7ff ff96 	bl	80008f8 <__sfp_lock_release>
 80009cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80009d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80009d4:	6025      	str	r5, [r4, #0]
 80009d6:	61a5      	str	r5, [r4, #24]
 80009d8:	2208      	movs	r2, #8
 80009da:	4629      	mov	r1, r5
 80009dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80009e0:	f000 f861 	bl	8000aa6 <memset>
 80009e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80009e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80009ec:	4620      	mov	r0, r4
 80009ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009f0:	3468      	adds	r4, #104	; 0x68
 80009f2:	e7d9      	b.n	80009a8 <__sfp+0x1c>
 80009f4:	2104      	movs	r1, #4
 80009f6:	4638      	mov	r0, r7
 80009f8:	f7ff ff62 	bl	80008c0 <__sfmoreglue>
 80009fc:	4604      	mov	r4, r0
 80009fe:	6030      	str	r0, [r6, #0]
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d1d5      	bne.n	80009b0 <__sfp+0x24>
 8000a04:	f7ff ff78 	bl	80008f8 <__sfp_lock_release>
 8000a08:	230c      	movs	r3, #12
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	e7ee      	b.n	80009ec <__sfp+0x60>
 8000a0e:	bf00      	nop
 8000a10:	080016dc 	.word	0x080016dc
 8000a14:	ffff0001 	.word	0xffff0001

08000a18 <_fwalk_reent>:
 8000a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a1c:	4606      	mov	r6, r0
 8000a1e:	4688      	mov	r8, r1
 8000a20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000a24:	2700      	movs	r7, #0
 8000a26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a2a:	f1b9 0901 	subs.w	r9, r9, #1
 8000a2e:	d505      	bpl.n	8000a3c <_fwalk_reent+0x24>
 8000a30:	6824      	ldr	r4, [r4, #0]
 8000a32:	2c00      	cmp	r4, #0
 8000a34:	d1f7      	bne.n	8000a26 <_fwalk_reent+0xe>
 8000a36:	4638      	mov	r0, r7
 8000a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a3c:	89ab      	ldrh	r3, [r5, #12]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d907      	bls.n	8000a52 <_fwalk_reent+0x3a>
 8000a42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a46:	3301      	adds	r3, #1
 8000a48:	d003      	beq.n	8000a52 <_fwalk_reent+0x3a>
 8000a4a:	4629      	mov	r1, r5
 8000a4c:	4630      	mov	r0, r6
 8000a4e:	47c0      	blx	r8
 8000a50:	4307      	orrs	r7, r0
 8000a52:	3568      	adds	r5, #104	; 0x68
 8000a54:	e7e9      	b.n	8000a2a <_fwalk_reent+0x12>
	...

08000a58 <__libc_init_array>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	4d0d      	ldr	r5, [pc, #52]	; (8000a90 <__libc_init_array+0x38>)
 8000a5c:	4c0d      	ldr	r4, [pc, #52]	; (8000a94 <__libc_init_array+0x3c>)
 8000a5e:	1b64      	subs	r4, r4, r5
 8000a60:	10a4      	asrs	r4, r4, #2
 8000a62:	2600      	movs	r6, #0
 8000a64:	42a6      	cmp	r6, r4
 8000a66:	d109      	bne.n	8000a7c <__libc_init_array+0x24>
 8000a68:	4d0b      	ldr	r5, [pc, #44]	; (8000a98 <__libc_init_array+0x40>)
 8000a6a:	4c0c      	ldr	r4, [pc, #48]	; (8000a9c <__libc_init_array+0x44>)
 8000a6c:	f000 fdf8 	bl	8001660 <_init>
 8000a70:	1b64      	subs	r4, r4, r5
 8000a72:	10a4      	asrs	r4, r4, #2
 8000a74:	2600      	movs	r6, #0
 8000a76:	42a6      	cmp	r6, r4
 8000a78:	d105      	bne.n	8000a86 <__libc_init_array+0x2e>
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a80:	4798      	blx	r3
 8000a82:	3601      	adds	r6, #1
 8000a84:	e7ee      	b.n	8000a64 <__libc_init_array+0xc>
 8000a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a8a:	4798      	blx	r3
 8000a8c:	3601      	adds	r6, #1
 8000a8e:	e7f2      	b.n	8000a76 <__libc_init_array+0x1e>
 8000a90:	08001714 	.word	0x08001714
 8000a94:	08001714 	.word	0x08001714
 8000a98:	08001714 	.word	0x08001714
 8000a9c:	08001718 	.word	0x08001718

08000aa0 <__retarget_lock_init_recursive>:
 8000aa0:	4770      	bx	lr

08000aa2 <__retarget_lock_acquire_recursive>:
 8000aa2:	4770      	bx	lr

08000aa4 <__retarget_lock_release_recursive>:
 8000aa4:	4770      	bx	lr

08000aa6 <memset>:
 8000aa6:	4402      	add	r2, r0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d100      	bne.n	8000ab0 <memset+0xa>
 8000aae:	4770      	bx	lr
 8000ab0:	f803 1b01 	strb.w	r1, [r3], #1
 8000ab4:	e7f9      	b.n	8000aaa <memset+0x4>
	...

08000ab8 <_free_r>:
 8000ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000aba:	2900      	cmp	r1, #0
 8000abc:	d044      	beq.n	8000b48 <_free_r+0x90>
 8000abe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ac2:	9001      	str	r0, [sp, #4]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f1a1 0404 	sub.w	r4, r1, #4
 8000aca:	bfb8      	it	lt
 8000acc:	18e4      	addlt	r4, r4, r3
 8000ace:	f000 f973 	bl	8000db8 <__malloc_lock>
 8000ad2:	4a1e      	ldr	r2, [pc, #120]	; (8000b4c <_free_r+0x94>)
 8000ad4:	9801      	ldr	r0, [sp, #4]
 8000ad6:	6813      	ldr	r3, [r2, #0]
 8000ad8:	b933      	cbnz	r3, 8000ae8 <_free_r+0x30>
 8000ada:	6063      	str	r3, [r4, #4]
 8000adc:	6014      	str	r4, [r2, #0]
 8000ade:	b003      	add	sp, #12
 8000ae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000ae4:	f000 b96e 	b.w	8000dc4 <__malloc_unlock>
 8000ae8:	42a3      	cmp	r3, r4
 8000aea:	d908      	bls.n	8000afe <_free_r+0x46>
 8000aec:	6825      	ldr	r5, [r4, #0]
 8000aee:	1961      	adds	r1, r4, r5
 8000af0:	428b      	cmp	r3, r1
 8000af2:	bf01      	itttt	eq
 8000af4:	6819      	ldreq	r1, [r3, #0]
 8000af6:	685b      	ldreq	r3, [r3, #4]
 8000af8:	1949      	addeq	r1, r1, r5
 8000afa:	6021      	streq	r1, [r4, #0]
 8000afc:	e7ed      	b.n	8000ada <_free_r+0x22>
 8000afe:	461a      	mov	r2, r3
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	b10b      	cbz	r3, 8000b08 <_free_r+0x50>
 8000b04:	42a3      	cmp	r3, r4
 8000b06:	d9fa      	bls.n	8000afe <_free_r+0x46>
 8000b08:	6811      	ldr	r1, [r2, #0]
 8000b0a:	1855      	adds	r5, r2, r1
 8000b0c:	42a5      	cmp	r5, r4
 8000b0e:	d10b      	bne.n	8000b28 <_free_r+0x70>
 8000b10:	6824      	ldr	r4, [r4, #0]
 8000b12:	4421      	add	r1, r4
 8000b14:	1854      	adds	r4, r2, r1
 8000b16:	42a3      	cmp	r3, r4
 8000b18:	6011      	str	r1, [r2, #0]
 8000b1a:	d1e0      	bne.n	8000ade <_free_r+0x26>
 8000b1c:	681c      	ldr	r4, [r3, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	6053      	str	r3, [r2, #4]
 8000b22:	4421      	add	r1, r4
 8000b24:	6011      	str	r1, [r2, #0]
 8000b26:	e7da      	b.n	8000ade <_free_r+0x26>
 8000b28:	d902      	bls.n	8000b30 <_free_r+0x78>
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	6003      	str	r3, [r0, #0]
 8000b2e:	e7d6      	b.n	8000ade <_free_r+0x26>
 8000b30:	6825      	ldr	r5, [r4, #0]
 8000b32:	1961      	adds	r1, r4, r5
 8000b34:	428b      	cmp	r3, r1
 8000b36:	bf04      	itt	eq
 8000b38:	6819      	ldreq	r1, [r3, #0]
 8000b3a:	685b      	ldreq	r3, [r3, #4]
 8000b3c:	6063      	str	r3, [r4, #4]
 8000b3e:	bf04      	itt	eq
 8000b40:	1949      	addeq	r1, r1, r5
 8000b42:	6021      	streq	r1, [r4, #0]
 8000b44:	6054      	str	r4, [r2, #4]
 8000b46:	e7ca      	b.n	8000ade <_free_r+0x26>
 8000b48:	b003      	add	sp, #12
 8000b4a:	bd30      	pop	{r4, r5, pc}
 8000b4c:	2000008c 	.word	0x2000008c

08000b50 <sbrk_aligned>:
 8000b50:	b570      	push	{r4, r5, r6, lr}
 8000b52:	4e0e      	ldr	r6, [pc, #56]	; (8000b8c <sbrk_aligned+0x3c>)
 8000b54:	460c      	mov	r4, r1
 8000b56:	6831      	ldr	r1, [r6, #0]
 8000b58:	4605      	mov	r5, r0
 8000b5a:	b911      	cbnz	r1, 8000b62 <sbrk_aligned+0x12>
 8000b5c:	f000 f8a4 	bl	8000ca8 <_sbrk_r>
 8000b60:	6030      	str	r0, [r6, #0]
 8000b62:	4621      	mov	r1, r4
 8000b64:	4628      	mov	r0, r5
 8000b66:	f000 f89f 	bl	8000ca8 <_sbrk_r>
 8000b6a:	1c43      	adds	r3, r0, #1
 8000b6c:	d00a      	beq.n	8000b84 <sbrk_aligned+0x34>
 8000b6e:	1cc4      	adds	r4, r0, #3
 8000b70:	f024 0403 	bic.w	r4, r4, #3
 8000b74:	42a0      	cmp	r0, r4
 8000b76:	d007      	beq.n	8000b88 <sbrk_aligned+0x38>
 8000b78:	1a21      	subs	r1, r4, r0
 8000b7a:	4628      	mov	r0, r5
 8000b7c:	f000 f894 	bl	8000ca8 <_sbrk_r>
 8000b80:	3001      	adds	r0, #1
 8000b82:	d101      	bne.n	8000b88 <sbrk_aligned+0x38>
 8000b84:	f04f 34ff 	mov.w	r4, #4294967295
 8000b88:	4620      	mov	r0, r4
 8000b8a:	bd70      	pop	{r4, r5, r6, pc}
 8000b8c:	20000090 	.word	0x20000090

08000b90 <_malloc_r>:
 8000b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b94:	1ccd      	adds	r5, r1, #3
 8000b96:	f025 0503 	bic.w	r5, r5, #3
 8000b9a:	3508      	adds	r5, #8
 8000b9c:	2d0c      	cmp	r5, #12
 8000b9e:	bf38      	it	cc
 8000ba0:	250c      	movcc	r5, #12
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	4607      	mov	r7, r0
 8000ba6:	db01      	blt.n	8000bac <_malloc_r+0x1c>
 8000ba8:	42a9      	cmp	r1, r5
 8000baa:	d905      	bls.n	8000bb8 <_malloc_r+0x28>
 8000bac:	230c      	movs	r3, #12
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bb8:	4e2e      	ldr	r6, [pc, #184]	; (8000c74 <_malloc_r+0xe4>)
 8000bba:	f000 f8fd 	bl	8000db8 <__malloc_lock>
 8000bbe:	6833      	ldr	r3, [r6, #0]
 8000bc0:	461c      	mov	r4, r3
 8000bc2:	bb34      	cbnz	r4, 8000c12 <_malloc_r+0x82>
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	4638      	mov	r0, r7
 8000bc8:	f7ff ffc2 	bl	8000b50 <sbrk_aligned>
 8000bcc:	1c43      	adds	r3, r0, #1
 8000bce:	4604      	mov	r4, r0
 8000bd0:	d14d      	bne.n	8000c6e <_malloc_r+0xde>
 8000bd2:	6834      	ldr	r4, [r6, #0]
 8000bd4:	4626      	mov	r6, r4
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d140      	bne.n	8000c5c <_malloc_r+0xcc>
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	4631      	mov	r1, r6
 8000bde:	4638      	mov	r0, r7
 8000be0:	eb04 0803 	add.w	r8, r4, r3
 8000be4:	f000 f860 	bl	8000ca8 <_sbrk_r>
 8000be8:	4580      	cmp	r8, r0
 8000bea:	d13a      	bne.n	8000c62 <_malloc_r+0xd2>
 8000bec:	6821      	ldr	r1, [r4, #0]
 8000bee:	3503      	adds	r5, #3
 8000bf0:	1a6d      	subs	r5, r5, r1
 8000bf2:	f025 0503 	bic.w	r5, r5, #3
 8000bf6:	3508      	adds	r5, #8
 8000bf8:	2d0c      	cmp	r5, #12
 8000bfa:	bf38      	it	cc
 8000bfc:	250c      	movcc	r5, #12
 8000bfe:	4629      	mov	r1, r5
 8000c00:	4638      	mov	r0, r7
 8000c02:	f7ff ffa5 	bl	8000b50 <sbrk_aligned>
 8000c06:	3001      	adds	r0, #1
 8000c08:	d02b      	beq.n	8000c62 <_malloc_r+0xd2>
 8000c0a:	6823      	ldr	r3, [r4, #0]
 8000c0c:	442b      	add	r3, r5
 8000c0e:	6023      	str	r3, [r4, #0]
 8000c10:	e00e      	b.n	8000c30 <_malloc_r+0xa0>
 8000c12:	6822      	ldr	r2, [r4, #0]
 8000c14:	1b52      	subs	r2, r2, r5
 8000c16:	d41e      	bmi.n	8000c56 <_malloc_r+0xc6>
 8000c18:	2a0b      	cmp	r2, #11
 8000c1a:	d916      	bls.n	8000c4a <_malloc_r+0xba>
 8000c1c:	1961      	adds	r1, r4, r5
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	6025      	str	r5, [r4, #0]
 8000c22:	bf18      	it	ne
 8000c24:	6059      	strne	r1, [r3, #4]
 8000c26:	6863      	ldr	r3, [r4, #4]
 8000c28:	bf08      	it	eq
 8000c2a:	6031      	streq	r1, [r6, #0]
 8000c2c:	5162      	str	r2, [r4, r5]
 8000c2e:	604b      	str	r3, [r1, #4]
 8000c30:	4638      	mov	r0, r7
 8000c32:	f104 060b 	add.w	r6, r4, #11
 8000c36:	f000 f8c5 	bl	8000dc4 <__malloc_unlock>
 8000c3a:	f026 0607 	bic.w	r6, r6, #7
 8000c3e:	1d23      	adds	r3, r4, #4
 8000c40:	1af2      	subs	r2, r6, r3
 8000c42:	d0b6      	beq.n	8000bb2 <_malloc_r+0x22>
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	50a3      	str	r3, [r4, r2]
 8000c48:	e7b3      	b.n	8000bb2 <_malloc_r+0x22>
 8000c4a:	6862      	ldr	r2, [r4, #4]
 8000c4c:	42a3      	cmp	r3, r4
 8000c4e:	bf0c      	ite	eq
 8000c50:	6032      	streq	r2, [r6, #0]
 8000c52:	605a      	strne	r2, [r3, #4]
 8000c54:	e7ec      	b.n	8000c30 <_malloc_r+0xa0>
 8000c56:	4623      	mov	r3, r4
 8000c58:	6864      	ldr	r4, [r4, #4]
 8000c5a:	e7b2      	b.n	8000bc2 <_malloc_r+0x32>
 8000c5c:	4634      	mov	r4, r6
 8000c5e:	6876      	ldr	r6, [r6, #4]
 8000c60:	e7b9      	b.n	8000bd6 <_malloc_r+0x46>
 8000c62:	230c      	movs	r3, #12
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4638      	mov	r0, r7
 8000c68:	f000 f8ac 	bl	8000dc4 <__malloc_unlock>
 8000c6c:	e7a1      	b.n	8000bb2 <_malloc_r+0x22>
 8000c6e:	6025      	str	r5, [r4, #0]
 8000c70:	e7de      	b.n	8000c30 <_malloc_r+0xa0>
 8000c72:	bf00      	nop
 8000c74:	2000008c 	.word	0x2000008c

08000c78 <iprintf>:
 8000c78:	b40f      	push	{r0, r1, r2, r3}
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <iprintf+0x2c>)
 8000c7c:	b513      	push	{r0, r1, r4, lr}
 8000c7e:	681c      	ldr	r4, [r3, #0]
 8000c80:	b124      	cbz	r4, 8000c8c <iprintf+0x14>
 8000c82:	69a3      	ldr	r3, [r4, #24]
 8000c84:	b913      	cbnz	r3, 8000c8c <iprintf+0x14>
 8000c86:	4620      	mov	r0, r4
 8000c88:	f7ff fe48 	bl	800091c <__sinit>
 8000c8c:	ab05      	add	r3, sp, #20
 8000c8e:	9a04      	ldr	r2, [sp, #16]
 8000c90:	68a1      	ldr	r1, [r4, #8]
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	4620      	mov	r0, r4
 8000c96:	f000 f8c5 	bl	8000e24 <_vfiprintf_r>
 8000c9a:	b002      	add	sp, #8
 8000c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4770      	bx	lr
 8000ca4:	20000000 	.word	0x20000000

08000ca8 <_sbrk_r>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	4d06      	ldr	r5, [pc, #24]	; (8000cc4 <_sbrk_r+0x1c>)
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	602b      	str	r3, [r5, #0]
 8000cb4:	f7ff fc04 	bl	80004c0 <_sbrk>
 8000cb8:	1c43      	adds	r3, r0, #1
 8000cba:	d102      	bne.n	8000cc2 <_sbrk_r+0x1a>
 8000cbc:	682b      	ldr	r3, [r5, #0]
 8000cbe:	b103      	cbz	r3, 8000cc2 <_sbrk_r+0x1a>
 8000cc0:	6023      	str	r3, [r4, #0]
 8000cc2:	bd38      	pop	{r3, r4, r5, pc}
 8000cc4:	20000094 	.word	0x20000094

08000cc8 <__sread>:
 8000cc8:	b510      	push	{r4, lr}
 8000cca:	460c      	mov	r4, r1
 8000ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cd0:	f000 fb6c 	bl	80013ac <_read_r>
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	bfab      	itete	ge
 8000cd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000cda:	89a3      	ldrhlt	r3, [r4, #12]
 8000cdc:	181b      	addge	r3, r3, r0
 8000cde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000ce2:	bfac      	ite	ge
 8000ce4:	6563      	strge	r3, [r4, #84]	; 0x54
 8000ce6:	81a3      	strhlt	r3, [r4, #12]
 8000ce8:	bd10      	pop	{r4, pc}

08000cea <__swrite>:
 8000cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cee:	461f      	mov	r7, r3
 8000cf0:	898b      	ldrh	r3, [r1, #12]
 8000cf2:	05db      	lsls	r3, r3, #23
 8000cf4:	4605      	mov	r5, r0
 8000cf6:	460c      	mov	r4, r1
 8000cf8:	4616      	mov	r6, r2
 8000cfa:	d505      	bpl.n	8000d08 <__swrite+0x1e>
 8000cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d00:	2302      	movs	r3, #2
 8000d02:	2200      	movs	r2, #0
 8000d04:	f000 f846 	bl	8000d94 <_lseek_r>
 8000d08:	89a3      	ldrh	r3, [r4, #12]
 8000d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d12:	81a3      	strh	r3, [r4, #12]
 8000d14:	4632      	mov	r2, r6
 8000d16:	463b      	mov	r3, r7
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d1e:	f000 b817 	b.w	8000d50 <_write_r>

08000d22 <__sseek>:
 8000d22:	b510      	push	{r4, lr}
 8000d24:	460c      	mov	r4, r1
 8000d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d2a:	f000 f833 	bl	8000d94 <_lseek_r>
 8000d2e:	1c43      	adds	r3, r0, #1
 8000d30:	89a3      	ldrh	r3, [r4, #12]
 8000d32:	bf15      	itete	ne
 8000d34:	6560      	strne	r0, [r4, #84]	; 0x54
 8000d36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000d3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000d3e:	81a3      	strheq	r3, [r4, #12]
 8000d40:	bf18      	it	ne
 8000d42:	81a3      	strhne	r3, [r4, #12]
 8000d44:	bd10      	pop	{r4, pc}

08000d46 <__sclose>:
 8000d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d4a:	f000 b813 	b.w	8000d74 <_close_r>
	...

08000d50 <_write_r>:
 8000d50:	b538      	push	{r3, r4, r5, lr}
 8000d52:	4d07      	ldr	r5, [pc, #28]	; (8000d70 <_write_r+0x20>)
 8000d54:	4604      	mov	r4, r0
 8000d56:	4608      	mov	r0, r1
 8000d58:	4611      	mov	r1, r2
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	602a      	str	r2, [r5, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	f7ff fb5d 	bl	800041e <_write>
 8000d64:	1c43      	adds	r3, r0, #1
 8000d66:	d102      	bne.n	8000d6e <_write_r+0x1e>
 8000d68:	682b      	ldr	r3, [r5, #0]
 8000d6a:	b103      	cbz	r3, 8000d6e <_write_r+0x1e>
 8000d6c:	6023      	str	r3, [r4, #0]
 8000d6e:	bd38      	pop	{r3, r4, r5, pc}
 8000d70:	20000094 	.word	0x20000094

08000d74 <_close_r>:
 8000d74:	b538      	push	{r3, r4, r5, lr}
 8000d76:	4d06      	ldr	r5, [pc, #24]	; (8000d90 <_close_r+0x1c>)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	602b      	str	r3, [r5, #0]
 8000d80:	f7ff fb69 	bl	8000456 <_close>
 8000d84:	1c43      	adds	r3, r0, #1
 8000d86:	d102      	bne.n	8000d8e <_close_r+0x1a>
 8000d88:	682b      	ldr	r3, [r5, #0]
 8000d8a:	b103      	cbz	r3, 8000d8e <_close_r+0x1a>
 8000d8c:	6023      	str	r3, [r4, #0]
 8000d8e:	bd38      	pop	{r3, r4, r5, pc}
 8000d90:	20000094 	.word	0x20000094

08000d94 <_lseek_r>:
 8000d94:	b538      	push	{r3, r4, r5, lr}
 8000d96:	4d07      	ldr	r5, [pc, #28]	; (8000db4 <_lseek_r+0x20>)
 8000d98:	4604      	mov	r4, r0
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	2200      	movs	r2, #0
 8000da0:	602a      	str	r2, [r5, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	f7ff fb7e 	bl	80004a4 <_lseek>
 8000da8:	1c43      	adds	r3, r0, #1
 8000daa:	d102      	bne.n	8000db2 <_lseek_r+0x1e>
 8000dac:	682b      	ldr	r3, [r5, #0]
 8000dae:	b103      	cbz	r3, 8000db2 <_lseek_r+0x1e>
 8000db0:	6023      	str	r3, [r4, #0]
 8000db2:	bd38      	pop	{r3, r4, r5, pc}
 8000db4:	20000094 	.word	0x20000094

08000db8 <__malloc_lock>:
 8000db8:	4801      	ldr	r0, [pc, #4]	; (8000dc0 <__malloc_lock+0x8>)
 8000dba:	f7ff be72 	b.w	8000aa2 <__retarget_lock_acquire_recursive>
 8000dbe:	bf00      	nop
 8000dc0:	20000088 	.word	0x20000088

08000dc4 <__malloc_unlock>:
 8000dc4:	4801      	ldr	r0, [pc, #4]	; (8000dcc <__malloc_unlock+0x8>)
 8000dc6:	f7ff be6d 	b.w	8000aa4 <__retarget_lock_release_recursive>
 8000dca:	bf00      	nop
 8000dcc:	20000088 	.word	0x20000088

08000dd0 <__sfputc_r>:
 8000dd0:	6893      	ldr	r3, [r2, #8]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	b410      	push	{r4}
 8000dd8:	6093      	str	r3, [r2, #8]
 8000dda:	da08      	bge.n	8000dee <__sfputc_r+0x1e>
 8000ddc:	6994      	ldr	r4, [r2, #24]
 8000dde:	42a3      	cmp	r3, r4
 8000de0:	db01      	blt.n	8000de6 <__sfputc_r+0x16>
 8000de2:	290a      	cmp	r1, #10
 8000de4:	d103      	bne.n	8000dee <__sfputc_r+0x1e>
 8000de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dea:	f000 baf1 	b.w	80013d0 <__swbuf_r>
 8000dee:	6813      	ldr	r3, [r2, #0]
 8000df0:	1c58      	adds	r0, r3, #1
 8000df2:	6010      	str	r0, [r2, #0]
 8000df4:	7019      	strb	r1, [r3, #0]
 8000df6:	4608      	mov	r0, r1
 8000df8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <__sfputs_r>:
 8000dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e00:	4606      	mov	r6, r0
 8000e02:	460f      	mov	r7, r1
 8000e04:	4614      	mov	r4, r2
 8000e06:	18d5      	adds	r5, r2, r3
 8000e08:	42ac      	cmp	r4, r5
 8000e0a:	d101      	bne.n	8000e10 <__sfputs_r+0x12>
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	e007      	b.n	8000e20 <__sfputs_r+0x22>
 8000e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e14:	463a      	mov	r2, r7
 8000e16:	4630      	mov	r0, r6
 8000e18:	f7ff ffda 	bl	8000dd0 <__sfputc_r>
 8000e1c:	1c43      	adds	r3, r0, #1
 8000e1e:	d1f3      	bne.n	8000e08 <__sfputs_r+0xa>
 8000e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e24 <_vfiprintf_r>:
 8000e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e28:	460d      	mov	r5, r1
 8000e2a:	b09d      	sub	sp, #116	; 0x74
 8000e2c:	4614      	mov	r4, r2
 8000e2e:	4698      	mov	r8, r3
 8000e30:	4606      	mov	r6, r0
 8000e32:	b118      	cbz	r0, 8000e3c <_vfiprintf_r+0x18>
 8000e34:	6983      	ldr	r3, [r0, #24]
 8000e36:	b90b      	cbnz	r3, 8000e3c <_vfiprintf_r+0x18>
 8000e38:	f7ff fd70 	bl	800091c <__sinit>
 8000e3c:	4b89      	ldr	r3, [pc, #548]	; (8001064 <_vfiprintf_r+0x240>)
 8000e3e:	429d      	cmp	r5, r3
 8000e40:	d11b      	bne.n	8000e7a <_vfiprintf_r+0x56>
 8000e42:	6875      	ldr	r5, [r6, #4]
 8000e44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e46:	07d9      	lsls	r1, r3, #31
 8000e48:	d405      	bmi.n	8000e56 <_vfiprintf_r+0x32>
 8000e4a:	89ab      	ldrh	r3, [r5, #12]
 8000e4c:	059a      	lsls	r2, r3, #22
 8000e4e:	d402      	bmi.n	8000e56 <_vfiprintf_r+0x32>
 8000e50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e52:	f7ff fe26 	bl	8000aa2 <__retarget_lock_acquire_recursive>
 8000e56:	89ab      	ldrh	r3, [r5, #12]
 8000e58:	071b      	lsls	r3, r3, #28
 8000e5a:	d501      	bpl.n	8000e60 <_vfiprintf_r+0x3c>
 8000e5c:	692b      	ldr	r3, [r5, #16]
 8000e5e:	b9eb      	cbnz	r3, 8000e9c <_vfiprintf_r+0x78>
 8000e60:	4629      	mov	r1, r5
 8000e62:	4630      	mov	r0, r6
 8000e64:	f000 fb06 	bl	8001474 <__swsetup_r>
 8000e68:	b1c0      	cbz	r0, 8000e9c <_vfiprintf_r+0x78>
 8000e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e6c:	07dc      	lsls	r4, r3, #31
 8000e6e:	d50e      	bpl.n	8000e8e <_vfiprintf_r+0x6a>
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	b01d      	add	sp, #116	; 0x74
 8000e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e7a:	4b7b      	ldr	r3, [pc, #492]	; (8001068 <_vfiprintf_r+0x244>)
 8000e7c:	429d      	cmp	r5, r3
 8000e7e:	d101      	bne.n	8000e84 <_vfiprintf_r+0x60>
 8000e80:	68b5      	ldr	r5, [r6, #8]
 8000e82:	e7df      	b.n	8000e44 <_vfiprintf_r+0x20>
 8000e84:	4b79      	ldr	r3, [pc, #484]	; (800106c <_vfiprintf_r+0x248>)
 8000e86:	429d      	cmp	r5, r3
 8000e88:	bf08      	it	eq
 8000e8a:	68f5      	ldreq	r5, [r6, #12]
 8000e8c:	e7da      	b.n	8000e44 <_vfiprintf_r+0x20>
 8000e8e:	89ab      	ldrh	r3, [r5, #12]
 8000e90:	0598      	lsls	r0, r3, #22
 8000e92:	d4ed      	bmi.n	8000e70 <_vfiprintf_r+0x4c>
 8000e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e96:	f7ff fe05 	bl	8000aa4 <__retarget_lock_release_recursive>
 8000e9a:	e7e9      	b.n	8000e70 <_vfiprintf_r+0x4c>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000eaa:	2330      	movs	r3, #48	; 0x30
 8000eac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001070 <_vfiprintf_r+0x24c>
 8000eb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000eb4:	f04f 0901 	mov.w	r9, #1
 8000eb8:	4623      	mov	r3, r4
 8000eba:	469a      	mov	sl, r3
 8000ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ec0:	b10a      	cbz	r2, 8000ec6 <_vfiprintf_r+0xa2>
 8000ec2:	2a25      	cmp	r2, #37	; 0x25
 8000ec4:	d1f9      	bne.n	8000eba <_vfiprintf_r+0x96>
 8000ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8000eca:	d00b      	beq.n	8000ee4 <_vfiprintf_r+0xc0>
 8000ecc:	465b      	mov	r3, fp
 8000ece:	4622      	mov	r2, r4
 8000ed0:	4629      	mov	r1, r5
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	f7ff ff93 	bl	8000dfe <__sfputs_r>
 8000ed8:	3001      	adds	r0, #1
 8000eda:	f000 80aa 	beq.w	8001032 <_vfiprintf_r+0x20e>
 8000ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ee0:	445a      	add	r2, fp
 8000ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8000ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f000 80a2 	beq.w	8001032 <_vfiprintf_r+0x20e>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ef8:	f10a 0a01 	add.w	sl, sl, #1
 8000efc:	9304      	str	r3, [sp, #16]
 8000efe:	9307      	str	r3, [sp, #28]
 8000f00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000f04:	931a      	str	r3, [sp, #104]	; 0x68
 8000f06:	4654      	mov	r4, sl
 8000f08:	2205      	movs	r2, #5
 8000f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f0e:	4858      	ldr	r0, [pc, #352]	; (8001070 <_vfiprintf_r+0x24c>)
 8000f10:	f7ff f966 	bl	80001e0 <memchr>
 8000f14:	9a04      	ldr	r2, [sp, #16]
 8000f16:	b9d8      	cbnz	r0, 8000f50 <_vfiprintf_r+0x12c>
 8000f18:	06d1      	lsls	r1, r2, #27
 8000f1a:	bf44      	itt	mi
 8000f1c:	2320      	movmi	r3, #32
 8000f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f22:	0713      	lsls	r3, r2, #28
 8000f24:	bf44      	itt	mi
 8000f26:	232b      	movmi	r3, #43	; 0x2b
 8000f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8000f30:	2b2a      	cmp	r3, #42	; 0x2a
 8000f32:	d015      	beq.n	8000f60 <_vfiprintf_r+0x13c>
 8000f34:	9a07      	ldr	r2, [sp, #28]
 8000f36:	4654      	mov	r4, sl
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f04f 0c0a 	mov.w	ip, #10
 8000f3e:	4621      	mov	r1, r4
 8000f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f44:	3b30      	subs	r3, #48	; 0x30
 8000f46:	2b09      	cmp	r3, #9
 8000f48:	d94e      	bls.n	8000fe8 <_vfiprintf_r+0x1c4>
 8000f4a:	b1b0      	cbz	r0, 8000f7a <_vfiprintf_r+0x156>
 8000f4c:	9207      	str	r2, [sp, #28]
 8000f4e:	e014      	b.n	8000f7a <_vfiprintf_r+0x156>
 8000f50:	eba0 0308 	sub.w	r3, r0, r8
 8000f54:	fa09 f303 	lsl.w	r3, r9, r3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	9304      	str	r3, [sp, #16]
 8000f5c:	46a2      	mov	sl, r4
 8000f5e:	e7d2      	b.n	8000f06 <_vfiprintf_r+0xe2>
 8000f60:	9b03      	ldr	r3, [sp, #12]
 8000f62:	1d19      	adds	r1, r3, #4
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	9103      	str	r1, [sp, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	bfbb      	ittet	lt
 8000f6c:	425b      	neglt	r3, r3
 8000f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8000f72:	9307      	strge	r3, [sp, #28]
 8000f74:	9307      	strlt	r3, [sp, #28]
 8000f76:	bfb8      	it	lt
 8000f78:	9204      	strlt	r2, [sp, #16]
 8000f7a:	7823      	ldrb	r3, [r4, #0]
 8000f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8000f7e:	d10c      	bne.n	8000f9a <_vfiprintf_r+0x176>
 8000f80:	7863      	ldrb	r3, [r4, #1]
 8000f82:	2b2a      	cmp	r3, #42	; 0x2a
 8000f84:	d135      	bne.n	8000ff2 <_vfiprintf_r+0x1ce>
 8000f86:	9b03      	ldr	r3, [sp, #12]
 8000f88:	1d1a      	adds	r2, r3, #4
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	9203      	str	r2, [sp, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bfb8      	it	lt
 8000f92:	f04f 33ff 	movlt.w	r3, #4294967295
 8000f96:	3402      	adds	r4, #2
 8000f98:	9305      	str	r3, [sp, #20]
 8000f9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001080 <_vfiprintf_r+0x25c>
 8000f9e:	7821      	ldrb	r1, [r4, #0]
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	4650      	mov	r0, sl
 8000fa4:	f7ff f91c 	bl	80001e0 <memchr>
 8000fa8:	b140      	cbz	r0, 8000fbc <_vfiprintf_r+0x198>
 8000faa:	2340      	movs	r3, #64	; 0x40
 8000fac:	eba0 000a 	sub.w	r0, r0, sl
 8000fb0:	fa03 f000 	lsl.w	r0, r3, r0
 8000fb4:	9b04      	ldr	r3, [sp, #16]
 8000fb6:	4303      	orrs	r3, r0
 8000fb8:	3401      	adds	r4, #1
 8000fba:	9304      	str	r3, [sp, #16]
 8000fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fc0:	482c      	ldr	r0, [pc, #176]	; (8001074 <_vfiprintf_r+0x250>)
 8000fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000fc6:	2206      	movs	r2, #6
 8000fc8:	f7ff f90a 	bl	80001e0 <memchr>
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	d03f      	beq.n	8001050 <_vfiprintf_r+0x22c>
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <_vfiprintf_r+0x254>)
 8000fd2:	bb1b      	cbnz	r3, 800101c <_vfiprintf_r+0x1f8>
 8000fd4:	9b03      	ldr	r3, [sp, #12]
 8000fd6:	3307      	adds	r3, #7
 8000fd8:	f023 0307 	bic.w	r3, r3, #7
 8000fdc:	3308      	adds	r3, #8
 8000fde:	9303      	str	r3, [sp, #12]
 8000fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fe2:	443b      	add	r3, r7
 8000fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8000fe6:	e767      	b.n	8000eb8 <_vfiprintf_r+0x94>
 8000fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000fec:	460c      	mov	r4, r1
 8000fee:	2001      	movs	r0, #1
 8000ff0:	e7a5      	b.n	8000f3e <_vfiprintf_r+0x11a>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	3401      	adds	r4, #1
 8000ff6:	9305      	str	r3, [sp, #20]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f04f 0c0a 	mov.w	ip, #10
 8000ffe:	4620      	mov	r0, r4
 8001000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001004:	3a30      	subs	r2, #48	; 0x30
 8001006:	2a09      	cmp	r2, #9
 8001008:	d903      	bls.n	8001012 <_vfiprintf_r+0x1ee>
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0c5      	beq.n	8000f9a <_vfiprintf_r+0x176>
 800100e:	9105      	str	r1, [sp, #20]
 8001010:	e7c3      	b.n	8000f9a <_vfiprintf_r+0x176>
 8001012:	fb0c 2101 	mla	r1, ip, r1, r2
 8001016:	4604      	mov	r4, r0
 8001018:	2301      	movs	r3, #1
 800101a:	e7f0      	b.n	8000ffe <_vfiprintf_r+0x1da>
 800101c:	ab03      	add	r3, sp, #12
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	462a      	mov	r2, r5
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <_vfiprintf_r+0x258>)
 8001024:	a904      	add	r1, sp, #16
 8001026:	4630      	mov	r0, r6
 8001028:	f3af 8000 	nop.w
 800102c:	4607      	mov	r7, r0
 800102e:	1c78      	adds	r0, r7, #1
 8001030:	d1d6      	bne.n	8000fe0 <_vfiprintf_r+0x1bc>
 8001032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001034:	07d9      	lsls	r1, r3, #31
 8001036:	d405      	bmi.n	8001044 <_vfiprintf_r+0x220>
 8001038:	89ab      	ldrh	r3, [r5, #12]
 800103a:	059a      	lsls	r2, r3, #22
 800103c:	d402      	bmi.n	8001044 <_vfiprintf_r+0x220>
 800103e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001040:	f7ff fd30 	bl	8000aa4 <__retarget_lock_release_recursive>
 8001044:	89ab      	ldrh	r3, [r5, #12]
 8001046:	065b      	lsls	r3, r3, #25
 8001048:	f53f af12 	bmi.w	8000e70 <_vfiprintf_r+0x4c>
 800104c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800104e:	e711      	b.n	8000e74 <_vfiprintf_r+0x50>
 8001050:	ab03      	add	r3, sp, #12
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	462a      	mov	r2, r5
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <_vfiprintf_r+0x258>)
 8001058:	a904      	add	r1, sp, #16
 800105a:	4630      	mov	r0, r6
 800105c:	f000 f880 	bl	8001160 <_printf_i>
 8001060:	e7e4      	b.n	800102c <_vfiprintf_r+0x208>
 8001062:	bf00      	nop
 8001064:	0800169c 	.word	0x0800169c
 8001068:	080016bc 	.word	0x080016bc
 800106c:	0800167c 	.word	0x0800167c
 8001070:	080016e0 	.word	0x080016e0
 8001074:	080016ea 	.word	0x080016ea
 8001078:	00000000 	.word	0x00000000
 800107c:	08000dff 	.word	0x08000dff
 8001080:	080016e6 	.word	0x080016e6

08001084 <_printf_common>:
 8001084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001088:	4616      	mov	r6, r2
 800108a:	4699      	mov	r9, r3
 800108c:	688a      	ldr	r2, [r1, #8]
 800108e:	690b      	ldr	r3, [r1, #16]
 8001090:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001094:	4293      	cmp	r3, r2
 8001096:	bfb8      	it	lt
 8001098:	4613      	movlt	r3, r2
 800109a:	6033      	str	r3, [r6, #0]
 800109c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80010a0:	4607      	mov	r7, r0
 80010a2:	460c      	mov	r4, r1
 80010a4:	b10a      	cbz	r2, 80010aa <_printf_common+0x26>
 80010a6:	3301      	adds	r3, #1
 80010a8:	6033      	str	r3, [r6, #0]
 80010aa:	6823      	ldr	r3, [r4, #0]
 80010ac:	0699      	lsls	r1, r3, #26
 80010ae:	bf42      	ittt	mi
 80010b0:	6833      	ldrmi	r3, [r6, #0]
 80010b2:	3302      	addmi	r3, #2
 80010b4:	6033      	strmi	r3, [r6, #0]
 80010b6:	6825      	ldr	r5, [r4, #0]
 80010b8:	f015 0506 	ands.w	r5, r5, #6
 80010bc:	d106      	bne.n	80010cc <_printf_common+0x48>
 80010be:	f104 0a19 	add.w	sl, r4, #25
 80010c2:	68e3      	ldr	r3, [r4, #12]
 80010c4:	6832      	ldr	r2, [r6, #0]
 80010c6:	1a9b      	subs	r3, r3, r2
 80010c8:	42ab      	cmp	r3, r5
 80010ca:	dc26      	bgt.n	800111a <_printf_common+0x96>
 80010cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80010d0:	1e13      	subs	r3, r2, #0
 80010d2:	6822      	ldr	r2, [r4, #0]
 80010d4:	bf18      	it	ne
 80010d6:	2301      	movne	r3, #1
 80010d8:	0692      	lsls	r2, r2, #26
 80010da:	d42b      	bmi.n	8001134 <_printf_common+0xb0>
 80010dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80010e0:	4649      	mov	r1, r9
 80010e2:	4638      	mov	r0, r7
 80010e4:	47c0      	blx	r8
 80010e6:	3001      	adds	r0, #1
 80010e8:	d01e      	beq.n	8001128 <_printf_common+0xa4>
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	68e5      	ldr	r5, [r4, #12]
 80010ee:	6832      	ldr	r2, [r6, #0]
 80010f0:	f003 0306 	and.w	r3, r3, #6
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	bf08      	it	eq
 80010f8:	1aad      	subeq	r5, r5, r2
 80010fa:	68a3      	ldr	r3, [r4, #8]
 80010fc:	6922      	ldr	r2, [r4, #16]
 80010fe:	bf0c      	ite	eq
 8001100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001104:	2500      	movne	r5, #0
 8001106:	4293      	cmp	r3, r2
 8001108:	bfc4      	itt	gt
 800110a:	1a9b      	subgt	r3, r3, r2
 800110c:	18ed      	addgt	r5, r5, r3
 800110e:	2600      	movs	r6, #0
 8001110:	341a      	adds	r4, #26
 8001112:	42b5      	cmp	r5, r6
 8001114:	d11a      	bne.n	800114c <_printf_common+0xc8>
 8001116:	2000      	movs	r0, #0
 8001118:	e008      	b.n	800112c <_printf_common+0xa8>
 800111a:	2301      	movs	r3, #1
 800111c:	4652      	mov	r2, sl
 800111e:	4649      	mov	r1, r9
 8001120:	4638      	mov	r0, r7
 8001122:	47c0      	blx	r8
 8001124:	3001      	adds	r0, #1
 8001126:	d103      	bne.n	8001130 <_printf_common+0xac>
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001130:	3501      	adds	r5, #1
 8001132:	e7c6      	b.n	80010c2 <_printf_common+0x3e>
 8001134:	18e1      	adds	r1, r4, r3
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	2030      	movs	r0, #48	; 0x30
 800113a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800113e:	4422      	add	r2, r4
 8001140:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001144:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001148:	3302      	adds	r3, #2
 800114a:	e7c7      	b.n	80010dc <_printf_common+0x58>
 800114c:	2301      	movs	r3, #1
 800114e:	4622      	mov	r2, r4
 8001150:	4649      	mov	r1, r9
 8001152:	4638      	mov	r0, r7
 8001154:	47c0      	blx	r8
 8001156:	3001      	adds	r0, #1
 8001158:	d0e6      	beq.n	8001128 <_printf_common+0xa4>
 800115a:	3601      	adds	r6, #1
 800115c:	e7d9      	b.n	8001112 <_printf_common+0x8e>
	...

08001160 <_printf_i>:
 8001160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001164:	7e0f      	ldrb	r7, [r1, #24]
 8001166:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001168:	2f78      	cmp	r7, #120	; 0x78
 800116a:	4691      	mov	r9, r2
 800116c:	4680      	mov	r8, r0
 800116e:	460c      	mov	r4, r1
 8001170:	469a      	mov	sl, r3
 8001172:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001176:	d807      	bhi.n	8001188 <_printf_i+0x28>
 8001178:	2f62      	cmp	r7, #98	; 0x62
 800117a:	d80a      	bhi.n	8001192 <_printf_i+0x32>
 800117c:	2f00      	cmp	r7, #0
 800117e:	f000 80d8 	beq.w	8001332 <_printf_i+0x1d2>
 8001182:	2f58      	cmp	r7, #88	; 0x58
 8001184:	f000 80a3 	beq.w	80012ce <_printf_i+0x16e>
 8001188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800118c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001190:	e03a      	b.n	8001208 <_printf_i+0xa8>
 8001192:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001196:	2b15      	cmp	r3, #21
 8001198:	d8f6      	bhi.n	8001188 <_printf_i+0x28>
 800119a:	a101      	add	r1, pc, #4	; (adr r1, 80011a0 <_printf_i+0x40>)
 800119c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80011a0:	080011f9 	.word	0x080011f9
 80011a4:	0800120d 	.word	0x0800120d
 80011a8:	08001189 	.word	0x08001189
 80011ac:	08001189 	.word	0x08001189
 80011b0:	08001189 	.word	0x08001189
 80011b4:	08001189 	.word	0x08001189
 80011b8:	0800120d 	.word	0x0800120d
 80011bc:	08001189 	.word	0x08001189
 80011c0:	08001189 	.word	0x08001189
 80011c4:	08001189 	.word	0x08001189
 80011c8:	08001189 	.word	0x08001189
 80011cc:	08001319 	.word	0x08001319
 80011d0:	0800123d 	.word	0x0800123d
 80011d4:	080012fb 	.word	0x080012fb
 80011d8:	08001189 	.word	0x08001189
 80011dc:	08001189 	.word	0x08001189
 80011e0:	0800133b 	.word	0x0800133b
 80011e4:	08001189 	.word	0x08001189
 80011e8:	0800123d 	.word	0x0800123d
 80011ec:	08001189 	.word	0x08001189
 80011f0:	08001189 	.word	0x08001189
 80011f4:	08001303 	.word	0x08001303
 80011f8:	682b      	ldr	r3, [r5, #0]
 80011fa:	1d1a      	adds	r2, r3, #4
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	602a      	str	r2, [r5, #0]
 8001200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001204:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001208:	2301      	movs	r3, #1
 800120a:	e0a3      	b.n	8001354 <_printf_i+0x1f4>
 800120c:	6820      	ldr	r0, [r4, #0]
 800120e:	6829      	ldr	r1, [r5, #0]
 8001210:	0606      	lsls	r6, r0, #24
 8001212:	f101 0304 	add.w	r3, r1, #4
 8001216:	d50a      	bpl.n	800122e <_printf_i+0xce>
 8001218:	680e      	ldr	r6, [r1, #0]
 800121a:	602b      	str	r3, [r5, #0]
 800121c:	2e00      	cmp	r6, #0
 800121e:	da03      	bge.n	8001228 <_printf_i+0xc8>
 8001220:	232d      	movs	r3, #45	; 0x2d
 8001222:	4276      	negs	r6, r6
 8001224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001228:	485e      	ldr	r0, [pc, #376]	; (80013a4 <_printf_i+0x244>)
 800122a:	230a      	movs	r3, #10
 800122c:	e019      	b.n	8001262 <_printf_i+0x102>
 800122e:	680e      	ldr	r6, [r1, #0]
 8001230:	602b      	str	r3, [r5, #0]
 8001232:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001236:	bf18      	it	ne
 8001238:	b236      	sxthne	r6, r6
 800123a:	e7ef      	b.n	800121c <_printf_i+0xbc>
 800123c:	682b      	ldr	r3, [r5, #0]
 800123e:	6820      	ldr	r0, [r4, #0]
 8001240:	1d19      	adds	r1, r3, #4
 8001242:	6029      	str	r1, [r5, #0]
 8001244:	0601      	lsls	r1, r0, #24
 8001246:	d501      	bpl.n	800124c <_printf_i+0xec>
 8001248:	681e      	ldr	r6, [r3, #0]
 800124a:	e002      	b.n	8001252 <_printf_i+0xf2>
 800124c:	0646      	lsls	r6, r0, #25
 800124e:	d5fb      	bpl.n	8001248 <_printf_i+0xe8>
 8001250:	881e      	ldrh	r6, [r3, #0]
 8001252:	4854      	ldr	r0, [pc, #336]	; (80013a4 <_printf_i+0x244>)
 8001254:	2f6f      	cmp	r7, #111	; 0x6f
 8001256:	bf0c      	ite	eq
 8001258:	2308      	moveq	r3, #8
 800125a:	230a      	movne	r3, #10
 800125c:	2100      	movs	r1, #0
 800125e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001262:	6865      	ldr	r5, [r4, #4]
 8001264:	60a5      	str	r5, [r4, #8]
 8001266:	2d00      	cmp	r5, #0
 8001268:	bfa2      	ittt	ge
 800126a:	6821      	ldrge	r1, [r4, #0]
 800126c:	f021 0104 	bicge.w	r1, r1, #4
 8001270:	6021      	strge	r1, [r4, #0]
 8001272:	b90e      	cbnz	r6, 8001278 <_printf_i+0x118>
 8001274:	2d00      	cmp	r5, #0
 8001276:	d04d      	beq.n	8001314 <_printf_i+0x1b4>
 8001278:	4615      	mov	r5, r2
 800127a:	fbb6 f1f3 	udiv	r1, r6, r3
 800127e:	fb03 6711 	mls	r7, r3, r1, r6
 8001282:	5dc7      	ldrb	r7, [r0, r7]
 8001284:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001288:	4637      	mov	r7, r6
 800128a:	42bb      	cmp	r3, r7
 800128c:	460e      	mov	r6, r1
 800128e:	d9f4      	bls.n	800127a <_printf_i+0x11a>
 8001290:	2b08      	cmp	r3, #8
 8001292:	d10b      	bne.n	80012ac <_printf_i+0x14c>
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	07de      	lsls	r6, r3, #31
 8001298:	d508      	bpl.n	80012ac <_printf_i+0x14c>
 800129a:	6923      	ldr	r3, [r4, #16]
 800129c:	6861      	ldr	r1, [r4, #4]
 800129e:	4299      	cmp	r1, r3
 80012a0:	bfde      	ittt	le
 80012a2:	2330      	movle	r3, #48	; 0x30
 80012a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80012a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80012ac:	1b52      	subs	r2, r2, r5
 80012ae:	6122      	str	r2, [r4, #16]
 80012b0:	f8cd a000 	str.w	sl, [sp]
 80012b4:	464b      	mov	r3, r9
 80012b6:	aa03      	add	r2, sp, #12
 80012b8:	4621      	mov	r1, r4
 80012ba:	4640      	mov	r0, r8
 80012bc:	f7ff fee2 	bl	8001084 <_printf_common>
 80012c0:	3001      	adds	r0, #1
 80012c2:	d14c      	bne.n	800135e <_printf_i+0x1fe>
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	b004      	add	sp, #16
 80012ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ce:	4835      	ldr	r0, [pc, #212]	; (80013a4 <_printf_i+0x244>)
 80012d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80012d4:	6829      	ldr	r1, [r5, #0]
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80012dc:	6029      	str	r1, [r5, #0]
 80012de:	061d      	lsls	r5, r3, #24
 80012e0:	d514      	bpl.n	800130c <_printf_i+0x1ac>
 80012e2:	07df      	lsls	r7, r3, #31
 80012e4:	bf44      	itt	mi
 80012e6:	f043 0320 	orrmi.w	r3, r3, #32
 80012ea:	6023      	strmi	r3, [r4, #0]
 80012ec:	b91e      	cbnz	r6, 80012f6 <_printf_i+0x196>
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	f023 0320 	bic.w	r3, r3, #32
 80012f4:	6023      	str	r3, [r4, #0]
 80012f6:	2310      	movs	r3, #16
 80012f8:	e7b0      	b.n	800125c <_printf_i+0xfc>
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	f043 0320 	orr.w	r3, r3, #32
 8001300:	6023      	str	r3, [r4, #0]
 8001302:	2378      	movs	r3, #120	; 0x78
 8001304:	4828      	ldr	r0, [pc, #160]	; (80013a8 <_printf_i+0x248>)
 8001306:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800130a:	e7e3      	b.n	80012d4 <_printf_i+0x174>
 800130c:	0659      	lsls	r1, r3, #25
 800130e:	bf48      	it	mi
 8001310:	b2b6      	uxthmi	r6, r6
 8001312:	e7e6      	b.n	80012e2 <_printf_i+0x182>
 8001314:	4615      	mov	r5, r2
 8001316:	e7bb      	b.n	8001290 <_printf_i+0x130>
 8001318:	682b      	ldr	r3, [r5, #0]
 800131a:	6826      	ldr	r6, [r4, #0]
 800131c:	6961      	ldr	r1, [r4, #20]
 800131e:	1d18      	adds	r0, r3, #4
 8001320:	6028      	str	r0, [r5, #0]
 8001322:	0635      	lsls	r5, r6, #24
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	d501      	bpl.n	800132c <_printf_i+0x1cc>
 8001328:	6019      	str	r1, [r3, #0]
 800132a:	e002      	b.n	8001332 <_printf_i+0x1d2>
 800132c:	0670      	lsls	r0, r6, #25
 800132e:	d5fb      	bpl.n	8001328 <_printf_i+0x1c8>
 8001330:	8019      	strh	r1, [r3, #0]
 8001332:	2300      	movs	r3, #0
 8001334:	6123      	str	r3, [r4, #16]
 8001336:	4615      	mov	r5, r2
 8001338:	e7ba      	b.n	80012b0 <_printf_i+0x150>
 800133a:	682b      	ldr	r3, [r5, #0]
 800133c:	1d1a      	adds	r2, r3, #4
 800133e:	602a      	str	r2, [r5, #0]
 8001340:	681d      	ldr	r5, [r3, #0]
 8001342:	6862      	ldr	r2, [r4, #4]
 8001344:	2100      	movs	r1, #0
 8001346:	4628      	mov	r0, r5
 8001348:	f7fe ff4a 	bl	80001e0 <memchr>
 800134c:	b108      	cbz	r0, 8001352 <_printf_i+0x1f2>
 800134e:	1b40      	subs	r0, r0, r5
 8001350:	6060      	str	r0, [r4, #4]
 8001352:	6863      	ldr	r3, [r4, #4]
 8001354:	6123      	str	r3, [r4, #16]
 8001356:	2300      	movs	r3, #0
 8001358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800135c:	e7a8      	b.n	80012b0 <_printf_i+0x150>
 800135e:	6923      	ldr	r3, [r4, #16]
 8001360:	462a      	mov	r2, r5
 8001362:	4649      	mov	r1, r9
 8001364:	4640      	mov	r0, r8
 8001366:	47d0      	blx	sl
 8001368:	3001      	adds	r0, #1
 800136a:	d0ab      	beq.n	80012c4 <_printf_i+0x164>
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	079b      	lsls	r3, r3, #30
 8001370:	d413      	bmi.n	800139a <_printf_i+0x23a>
 8001372:	68e0      	ldr	r0, [r4, #12]
 8001374:	9b03      	ldr	r3, [sp, #12]
 8001376:	4298      	cmp	r0, r3
 8001378:	bfb8      	it	lt
 800137a:	4618      	movlt	r0, r3
 800137c:	e7a4      	b.n	80012c8 <_printf_i+0x168>
 800137e:	2301      	movs	r3, #1
 8001380:	4632      	mov	r2, r6
 8001382:	4649      	mov	r1, r9
 8001384:	4640      	mov	r0, r8
 8001386:	47d0      	blx	sl
 8001388:	3001      	adds	r0, #1
 800138a:	d09b      	beq.n	80012c4 <_printf_i+0x164>
 800138c:	3501      	adds	r5, #1
 800138e:	68e3      	ldr	r3, [r4, #12]
 8001390:	9903      	ldr	r1, [sp, #12]
 8001392:	1a5b      	subs	r3, r3, r1
 8001394:	42ab      	cmp	r3, r5
 8001396:	dcf2      	bgt.n	800137e <_printf_i+0x21e>
 8001398:	e7eb      	b.n	8001372 <_printf_i+0x212>
 800139a:	2500      	movs	r5, #0
 800139c:	f104 0619 	add.w	r6, r4, #25
 80013a0:	e7f5      	b.n	800138e <_printf_i+0x22e>
 80013a2:	bf00      	nop
 80013a4:	080016f1 	.word	0x080016f1
 80013a8:	08001702 	.word	0x08001702

080013ac <_read_r>:
 80013ac:	b538      	push	{r3, r4, r5, lr}
 80013ae:	4d07      	ldr	r5, [pc, #28]	; (80013cc <_read_r+0x20>)
 80013b0:	4604      	mov	r4, r0
 80013b2:	4608      	mov	r0, r1
 80013b4:	4611      	mov	r1, r2
 80013b6:	2200      	movs	r2, #0
 80013b8:	602a      	str	r2, [r5, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	f7ff f812 	bl	80003e4 <_read>
 80013c0:	1c43      	adds	r3, r0, #1
 80013c2:	d102      	bne.n	80013ca <_read_r+0x1e>
 80013c4:	682b      	ldr	r3, [r5, #0]
 80013c6:	b103      	cbz	r3, 80013ca <_read_r+0x1e>
 80013c8:	6023      	str	r3, [r4, #0]
 80013ca:	bd38      	pop	{r3, r4, r5, pc}
 80013cc:	20000094 	.word	0x20000094

080013d0 <__swbuf_r>:
 80013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d2:	460e      	mov	r6, r1
 80013d4:	4614      	mov	r4, r2
 80013d6:	4605      	mov	r5, r0
 80013d8:	b118      	cbz	r0, 80013e2 <__swbuf_r+0x12>
 80013da:	6983      	ldr	r3, [r0, #24]
 80013dc:	b90b      	cbnz	r3, 80013e2 <__swbuf_r+0x12>
 80013de:	f7ff fa9d 	bl	800091c <__sinit>
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <__swbuf_r+0x98>)
 80013e4:	429c      	cmp	r4, r3
 80013e6:	d12b      	bne.n	8001440 <__swbuf_r+0x70>
 80013e8:	686c      	ldr	r4, [r5, #4]
 80013ea:	69a3      	ldr	r3, [r4, #24]
 80013ec:	60a3      	str	r3, [r4, #8]
 80013ee:	89a3      	ldrh	r3, [r4, #12]
 80013f0:	071a      	lsls	r2, r3, #28
 80013f2:	d52f      	bpl.n	8001454 <__swbuf_r+0x84>
 80013f4:	6923      	ldr	r3, [r4, #16]
 80013f6:	b36b      	cbz	r3, 8001454 <__swbuf_r+0x84>
 80013f8:	6923      	ldr	r3, [r4, #16]
 80013fa:	6820      	ldr	r0, [r4, #0]
 80013fc:	1ac0      	subs	r0, r0, r3
 80013fe:	6963      	ldr	r3, [r4, #20]
 8001400:	b2f6      	uxtb	r6, r6
 8001402:	4283      	cmp	r3, r0
 8001404:	4637      	mov	r7, r6
 8001406:	dc04      	bgt.n	8001412 <__swbuf_r+0x42>
 8001408:	4621      	mov	r1, r4
 800140a:	4628      	mov	r0, r5
 800140c:	f7ff f9e0 	bl	80007d0 <_fflush_r>
 8001410:	bb30      	cbnz	r0, 8001460 <__swbuf_r+0x90>
 8001412:	68a3      	ldr	r3, [r4, #8]
 8001414:	3b01      	subs	r3, #1
 8001416:	60a3      	str	r3, [r4, #8]
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	6022      	str	r2, [r4, #0]
 800141e:	701e      	strb	r6, [r3, #0]
 8001420:	6963      	ldr	r3, [r4, #20]
 8001422:	3001      	adds	r0, #1
 8001424:	4283      	cmp	r3, r0
 8001426:	d004      	beq.n	8001432 <__swbuf_r+0x62>
 8001428:	89a3      	ldrh	r3, [r4, #12]
 800142a:	07db      	lsls	r3, r3, #31
 800142c:	d506      	bpl.n	800143c <__swbuf_r+0x6c>
 800142e:	2e0a      	cmp	r6, #10
 8001430:	d104      	bne.n	800143c <__swbuf_r+0x6c>
 8001432:	4621      	mov	r1, r4
 8001434:	4628      	mov	r0, r5
 8001436:	f7ff f9cb 	bl	80007d0 <_fflush_r>
 800143a:	b988      	cbnz	r0, 8001460 <__swbuf_r+0x90>
 800143c:	4638      	mov	r0, r7
 800143e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <__swbuf_r+0x9c>)
 8001442:	429c      	cmp	r4, r3
 8001444:	d101      	bne.n	800144a <__swbuf_r+0x7a>
 8001446:	68ac      	ldr	r4, [r5, #8]
 8001448:	e7cf      	b.n	80013ea <__swbuf_r+0x1a>
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <__swbuf_r+0xa0>)
 800144c:	429c      	cmp	r4, r3
 800144e:	bf08      	it	eq
 8001450:	68ec      	ldreq	r4, [r5, #12]
 8001452:	e7ca      	b.n	80013ea <__swbuf_r+0x1a>
 8001454:	4621      	mov	r1, r4
 8001456:	4628      	mov	r0, r5
 8001458:	f000 f80c 	bl	8001474 <__swsetup_r>
 800145c:	2800      	cmp	r0, #0
 800145e:	d0cb      	beq.n	80013f8 <__swbuf_r+0x28>
 8001460:	f04f 37ff 	mov.w	r7, #4294967295
 8001464:	e7ea      	b.n	800143c <__swbuf_r+0x6c>
 8001466:	bf00      	nop
 8001468:	0800169c 	.word	0x0800169c
 800146c:	080016bc 	.word	0x080016bc
 8001470:	0800167c 	.word	0x0800167c

08001474 <__swsetup_r>:
 8001474:	4b32      	ldr	r3, [pc, #200]	; (8001540 <__swsetup_r+0xcc>)
 8001476:	b570      	push	{r4, r5, r6, lr}
 8001478:	681d      	ldr	r5, [r3, #0]
 800147a:	4606      	mov	r6, r0
 800147c:	460c      	mov	r4, r1
 800147e:	b125      	cbz	r5, 800148a <__swsetup_r+0x16>
 8001480:	69ab      	ldr	r3, [r5, #24]
 8001482:	b913      	cbnz	r3, 800148a <__swsetup_r+0x16>
 8001484:	4628      	mov	r0, r5
 8001486:	f7ff fa49 	bl	800091c <__sinit>
 800148a:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <__swsetup_r+0xd0>)
 800148c:	429c      	cmp	r4, r3
 800148e:	d10f      	bne.n	80014b0 <__swsetup_r+0x3c>
 8001490:	686c      	ldr	r4, [r5, #4]
 8001492:	89a3      	ldrh	r3, [r4, #12]
 8001494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001498:	0719      	lsls	r1, r3, #28
 800149a:	d42c      	bmi.n	80014f6 <__swsetup_r+0x82>
 800149c:	06dd      	lsls	r5, r3, #27
 800149e:	d411      	bmi.n	80014c4 <__swsetup_r+0x50>
 80014a0:	2309      	movs	r3, #9
 80014a2:	6033      	str	r3, [r6, #0]
 80014a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80014a8:	81a3      	strh	r3, [r4, #12]
 80014aa:	f04f 30ff 	mov.w	r0, #4294967295
 80014ae:	e03e      	b.n	800152e <__swsetup_r+0xba>
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <__swsetup_r+0xd4>)
 80014b2:	429c      	cmp	r4, r3
 80014b4:	d101      	bne.n	80014ba <__swsetup_r+0x46>
 80014b6:	68ac      	ldr	r4, [r5, #8]
 80014b8:	e7eb      	b.n	8001492 <__swsetup_r+0x1e>
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <__swsetup_r+0xd8>)
 80014bc:	429c      	cmp	r4, r3
 80014be:	bf08      	it	eq
 80014c0:	68ec      	ldreq	r4, [r5, #12]
 80014c2:	e7e6      	b.n	8001492 <__swsetup_r+0x1e>
 80014c4:	0758      	lsls	r0, r3, #29
 80014c6:	d512      	bpl.n	80014ee <__swsetup_r+0x7a>
 80014c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014ca:	b141      	cbz	r1, 80014de <__swsetup_r+0x6a>
 80014cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014d0:	4299      	cmp	r1, r3
 80014d2:	d002      	beq.n	80014da <__swsetup_r+0x66>
 80014d4:	4630      	mov	r0, r6
 80014d6:	f7ff faef 	bl	8000ab8 <_free_r>
 80014da:	2300      	movs	r3, #0
 80014dc:	6363      	str	r3, [r4, #52]	; 0x34
 80014de:	89a3      	ldrh	r3, [r4, #12]
 80014e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80014e4:	81a3      	strh	r3, [r4, #12]
 80014e6:	2300      	movs	r3, #0
 80014e8:	6063      	str	r3, [r4, #4]
 80014ea:	6923      	ldr	r3, [r4, #16]
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	89a3      	ldrh	r3, [r4, #12]
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	81a3      	strh	r3, [r4, #12]
 80014f6:	6923      	ldr	r3, [r4, #16]
 80014f8:	b94b      	cbnz	r3, 800150e <__swsetup_r+0x9a>
 80014fa:	89a3      	ldrh	r3, [r4, #12]
 80014fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001504:	d003      	beq.n	800150e <__swsetup_r+0x9a>
 8001506:	4621      	mov	r1, r4
 8001508:	4630      	mov	r0, r6
 800150a:	f000 f847 	bl	800159c <__smakebuf_r>
 800150e:	89a0      	ldrh	r0, [r4, #12]
 8001510:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001514:	f010 0301 	ands.w	r3, r0, #1
 8001518:	d00a      	beq.n	8001530 <__swsetup_r+0xbc>
 800151a:	2300      	movs	r3, #0
 800151c:	60a3      	str	r3, [r4, #8]
 800151e:	6963      	ldr	r3, [r4, #20]
 8001520:	425b      	negs	r3, r3
 8001522:	61a3      	str	r3, [r4, #24]
 8001524:	6923      	ldr	r3, [r4, #16]
 8001526:	b943      	cbnz	r3, 800153a <__swsetup_r+0xc6>
 8001528:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800152c:	d1ba      	bne.n	80014a4 <__swsetup_r+0x30>
 800152e:	bd70      	pop	{r4, r5, r6, pc}
 8001530:	0781      	lsls	r1, r0, #30
 8001532:	bf58      	it	pl
 8001534:	6963      	ldrpl	r3, [r4, #20]
 8001536:	60a3      	str	r3, [r4, #8]
 8001538:	e7f4      	b.n	8001524 <__swsetup_r+0xb0>
 800153a:	2000      	movs	r0, #0
 800153c:	e7f7      	b.n	800152e <__swsetup_r+0xba>
 800153e:	bf00      	nop
 8001540:	20000000 	.word	0x20000000
 8001544:	0800169c 	.word	0x0800169c
 8001548:	080016bc 	.word	0x080016bc
 800154c:	0800167c 	.word	0x0800167c

08001550 <__swhatbuf_r>:
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	460e      	mov	r6, r1
 8001554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001558:	2900      	cmp	r1, #0
 800155a:	b096      	sub	sp, #88	; 0x58
 800155c:	4614      	mov	r4, r2
 800155e:	461d      	mov	r5, r3
 8001560:	da08      	bge.n	8001574 <__swhatbuf_r+0x24>
 8001562:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	602a      	str	r2, [r5, #0]
 800156a:	061a      	lsls	r2, r3, #24
 800156c:	d410      	bmi.n	8001590 <__swhatbuf_r+0x40>
 800156e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001572:	e00e      	b.n	8001592 <__swhatbuf_r+0x42>
 8001574:	466a      	mov	r2, sp
 8001576:	f000 f851 	bl	800161c <_fstat_r>
 800157a:	2800      	cmp	r0, #0
 800157c:	dbf1      	blt.n	8001562 <__swhatbuf_r+0x12>
 800157e:	9a01      	ldr	r2, [sp, #4]
 8001580:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001584:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001588:	425a      	negs	r2, r3
 800158a:	415a      	adcs	r2, r3
 800158c:	602a      	str	r2, [r5, #0]
 800158e:	e7ee      	b.n	800156e <__swhatbuf_r+0x1e>
 8001590:	2340      	movs	r3, #64	; 0x40
 8001592:	2000      	movs	r0, #0
 8001594:	6023      	str	r3, [r4, #0]
 8001596:	b016      	add	sp, #88	; 0x58
 8001598:	bd70      	pop	{r4, r5, r6, pc}
	...

0800159c <__smakebuf_r>:
 800159c:	898b      	ldrh	r3, [r1, #12]
 800159e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80015a0:	079d      	lsls	r5, r3, #30
 80015a2:	4606      	mov	r6, r0
 80015a4:	460c      	mov	r4, r1
 80015a6:	d507      	bpl.n	80015b8 <__smakebuf_r+0x1c>
 80015a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80015ac:	6023      	str	r3, [r4, #0]
 80015ae:	6123      	str	r3, [r4, #16]
 80015b0:	2301      	movs	r3, #1
 80015b2:	6163      	str	r3, [r4, #20]
 80015b4:	b002      	add	sp, #8
 80015b6:	bd70      	pop	{r4, r5, r6, pc}
 80015b8:	ab01      	add	r3, sp, #4
 80015ba:	466a      	mov	r2, sp
 80015bc:	f7ff ffc8 	bl	8001550 <__swhatbuf_r>
 80015c0:	9900      	ldr	r1, [sp, #0]
 80015c2:	4605      	mov	r5, r0
 80015c4:	4630      	mov	r0, r6
 80015c6:	f7ff fae3 	bl	8000b90 <_malloc_r>
 80015ca:	b948      	cbnz	r0, 80015e0 <__smakebuf_r+0x44>
 80015cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015d0:	059a      	lsls	r2, r3, #22
 80015d2:	d4ef      	bmi.n	80015b4 <__smakebuf_r+0x18>
 80015d4:	f023 0303 	bic.w	r3, r3, #3
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	81a3      	strh	r3, [r4, #12]
 80015de:	e7e3      	b.n	80015a8 <__smakebuf_r+0xc>
 80015e0:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <__smakebuf_r+0x7c>)
 80015e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80015e4:	89a3      	ldrh	r3, [r4, #12]
 80015e6:	6020      	str	r0, [r4, #0]
 80015e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ec:	81a3      	strh	r3, [r4, #12]
 80015ee:	9b00      	ldr	r3, [sp, #0]
 80015f0:	6163      	str	r3, [r4, #20]
 80015f2:	9b01      	ldr	r3, [sp, #4]
 80015f4:	6120      	str	r0, [r4, #16]
 80015f6:	b15b      	cbz	r3, 8001610 <__smakebuf_r+0x74>
 80015f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015fc:	4630      	mov	r0, r6
 80015fe:	f000 f81f 	bl	8001640 <_isatty_r>
 8001602:	b128      	cbz	r0, 8001610 <__smakebuf_r+0x74>
 8001604:	89a3      	ldrh	r3, [r4, #12]
 8001606:	f023 0303 	bic.w	r3, r3, #3
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	81a3      	strh	r3, [r4, #12]
 8001610:	89a0      	ldrh	r0, [r4, #12]
 8001612:	4305      	orrs	r5, r0
 8001614:	81a5      	strh	r5, [r4, #12]
 8001616:	e7cd      	b.n	80015b4 <__smakebuf_r+0x18>
 8001618:	080008b5 	.word	0x080008b5

0800161c <_fstat_r>:
 800161c:	b538      	push	{r3, r4, r5, lr}
 800161e:	4d07      	ldr	r5, [pc, #28]	; (800163c <_fstat_r+0x20>)
 8001620:	2300      	movs	r3, #0
 8001622:	4604      	mov	r4, r0
 8001624:	4608      	mov	r0, r1
 8001626:	4611      	mov	r1, r2
 8001628:	602b      	str	r3, [r5, #0]
 800162a:	f7fe ff20 	bl	800046e <_fstat>
 800162e:	1c43      	adds	r3, r0, #1
 8001630:	d102      	bne.n	8001638 <_fstat_r+0x1c>
 8001632:	682b      	ldr	r3, [r5, #0]
 8001634:	b103      	cbz	r3, 8001638 <_fstat_r+0x1c>
 8001636:	6023      	str	r3, [r4, #0]
 8001638:	bd38      	pop	{r3, r4, r5, pc}
 800163a:	bf00      	nop
 800163c:	20000094 	.word	0x20000094

08001640 <_isatty_r>:
 8001640:	b538      	push	{r3, r4, r5, lr}
 8001642:	4d06      	ldr	r5, [pc, #24]	; (800165c <_isatty_r+0x1c>)
 8001644:	2300      	movs	r3, #0
 8001646:	4604      	mov	r4, r0
 8001648:	4608      	mov	r0, r1
 800164a:	602b      	str	r3, [r5, #0]
 800164c:	f7fe ff1f 	bl	800048e <_isatty>
 8001650:	1c43      	adds	r3, r0, #1
 8001652:	d102      	bne.n	800165a <_isatty_r+0x1a>
 8001654:	682b      	ldr	r3, [r5, #0]
 8001656:	b103      	cbz	r3, 800165a <_isatty_r+0x1a>
 8001658:	6023      	str	r3, [r4, #0]
 800165a:	bd38      	pop	{r3, r4, r5, pc}
 800165c:	20000094 	.word	0x20000094

08001660 <_init>:
 8001660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001662:	bf00      	nop
 8001664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001666:	bc08      	pop	{r3}
 8001668:	469e      	mov	lr, r3
 800166a:	4770      	bx	lr

0800166c <_fini>:
 800166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166e:	bf00      	nop
 8001670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001672:	bc08      	pop	{r3}
 8001674:	469e      	mov	lr, r3
 8001676:	4770      	bx	lr
